window = {
	name = "BMU_claim_window"
	widgetid = "BMU_claim"
	parentanchor = center
	size = { 1100 750 }
	position = { 0 0 }
	layer = top
	filter_mouse = all
	alwaystransparent = no

	visible = "[GetVariableSystem.Exists('BMU_claim_window')]"
	
	using = Background_Fade
	using = Window_Background_Popup


	state = {
		name = _show
		on_start = "[GetVariableSystem.Set('BMU_claim_window_tab','contender')]"
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { 0 5 }
		# # margin_right = 13

		widget = {
			size = { 100% 100% }
			datamodel = "[GetPlayer.MakeScope.GetList('BMU_pressed_claim_stakeholders')]"
			item = {
				vbox = {
					layoutpolicy_vertical = expanding
					datacontext = "[Scope.Var('pressed_claim').Var('claimed_title').Title]"
					visible = "[EqualTo_string(Scope.Var('pressed_claim').Var('claimed_title').Title.GetKey,GetVariableSystem.Get('BMU_claim_window'))]"
					margin_left = 10
					margin_right = 10

					header_pattern = {
						layoutpolicy_horizontal = expanding

						blockoverride "header_text"
						{
							text = "BMU_CLAIM_WINDOW_TITLE"
							# text = "[Scope.Var('pressed_claim').Var('claimed_title').Title.GetName]"
						}

						blockoverride "button_close"
						{
							onclick = "[GetVariableSystem.Clear('BMU_claim_window')]"
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						hbox = {
							name = "my_candidate"
							# datacontext = "[Scope.Var('pressed_claim').Var('claim_target').Char]"
							visible = "[Character.IsValid]"
							layoutpolicy_horizontal = expanding
							# margin = { 70 0 }
							margin_top = 20
	
							state = {
								name = _show
	
								duration = 0.2
	
								animation = {
									size = { 0 500 }
									bezier = { 0 0.5 0.5 1 }
								}
	
								animation = {
									alpha = 1
									bezier = { 0.5 0 1 0.5 }
								}
							}
	
							state = {
								name = _hide
								size = { 0 0 }
								alpha = 0
							}
	
							state = {
								name = "add_candidate"
								alpha = 0
								duration = 0.2
								next = "b"
								using = Animation_Curve_Default
							}
	
							state = {
								name = "b"
								alpha = 1
								duration = 0.2
								using = Animation_Curve_Default
							}
							
							hbox = {
								datacontext = "[Scope.Var('pressed_claim').Var('claim_target').Char]"
								margin_left = 20
								portrait_torso = {
									state = {
										name = "on_player_election_nomination"
										next = "nomination_shown"
										alpha = 0.5
									}
		
									state = {
										name = "nomination_shown"
										alpha = 1
										duration = 0.5
										using = Animation_Curve_Default
									}
		
									blockoverride "opinion_box" {}
									blockoverride "status_icons" {}
								}
								vbox = {
									layoutpolicy_vertical = expanding
		
									vbox = {
										min_width = 200
										spacing = 5
		
										text_label_center = {
											layoutpolicy_horizontal = expanding
											text = "BMU_CLAIM_WINDOW_TARGET"
										}
		
										text_single = {
											text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE_INFO"
											default_format = "#high"
											using = Font_Size_Big
										}
		
										expand = {
											minimumsize = { 0 10 }
										}
		
										text_single = {
											text = "BMU_CLAIM_WINDOW_SUPPORTER_COUNT"
											# text = "[GuiScope.SetRoot(Character.MakeScope).AddScope('story',Scope.Var('pressed_claim').Story.MakeScope).ScriptValue('FF_BMU_contender_supporter_count')|0]"
											
											using = Font_Size_Medium
										}
	
										hbox = {
											icon = {
												name = "icon_combat_strength"
												size = { 30 30 }
												texture = "gfx/interface/icons/icon_soldier.dds"
											}
	
											text_single = {
												default_format = "#high"
												text = "[GuiScope.SetRoot(Character.MakeScope).AddScope('story',Scope.Var('pressed_claim').Story.MakeScope).ScriptValue('FF_BMU_contender_mil_strength')|0]"
											}
										}
									}
								}
		
								
							}

							expand = {}

							hbox = {
								visible = "[And(EqualTo_string(Scope.Var('status').GetFlagName,'contender'),Not(ObjectsEqual(Scope.Var('pressed_claim').Var('claim_target').Char,GetPlayer.Self)))]"
								datacontext = "[GetPlayer]"
								margin_right = 20
								vbox = {
									layoutpolicy_vertical = expanding
									
									vbox = {
										min_width = 200
										spacing = 5
		
										text_label_center = {
											layoutpolicy_horizontal = expanding
											text = "BMU_CLAIM_WINDOW_CONTENDER"
										}
		
										text_single = {
											text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE_INFO"
											default_format = "#high"
											using = Font_Size_Big
										}
		
										expand = {
											minimumsize = { 0 10 }
										}
		
										text_single = {
											text = "BMU_CLAIM_WINDOW_SUPPORTER_COUNT"
											using = Font_Size_Medium
										}
	
										hbox = {
											icon = {
												name = "icon_combat_strength"
												size = { 30 30 }
												texture = "gfx/interface/icons/icon_soldier.dds"
											}
	
											text_single = {
												default_format = "#high"
												text = "[GuiScope.SetRoot(Character.MakeScope).AddScope('story',Scope.Var('pressed_claim').Story.MakeScope).ScriptValue('FF_BMU_contender_mil_strength')|0]"
											}
										}
									}
								}

								portrait_torso = {
									state = {
										name = "on_player_election_nomination"
										next = "nomination_shown"
										alpha = 0.5
									}
		
									state = {
										name = "nomination_shown"
										alpha = 1
										duration = 0.5
										using = Animation_Curve_Default
									}
		
									blockoverride "opinion_box" {}
									blockoverride "status_icons" {}
								}
	
								
							}

							hbox = {
								visible = "[Or(Not(EqualTo_string(Scope.Var('status').GetFlagName,'contender')),ObjectsEqual(Scope.Var('pressed_claim').Var('claim_target').Char,GetPlayer.Self))]"
								datacontext = "[Scope.Var('pressed_claim').Var('top_contender').Char]"
								margin_right = 20
								vbox = {
									layoutpolicy_vertical = expanding
									
									vbox = {
										min_width = 200
										spacing = 5
		
										text_label_center = {
											layoutpolicy_horizontal = expanding
											text = "BMU_CLAIM_WINDOW_CONTENDER"
										}
		
										text_single = {
											text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE_INFO"
											default_format = "#high"
											using = Font_Size_Big
										}
		
										expand = {
											minimumsize = { 0 10 }
										}
		
										text_single = {
											text = "BMU_CLAIM_WINDOW_SUPPORTER_COUNT"
											using = Font_Size_Medium
										}
	
										hbox = {
											icon = {
												name = "icon_combat_strength"
												size = { 30 30 }
												texture = "gfx/interface/icons/icon_soldier.dds"
											}
	
											text_single = {
												default_format = "#high"
												text = "[GuiScope.SetRoot(Character.MakeScope).AddScope('story',Scope.Var('pressed_claim').Story.MakeScope).ScriptValue('FF_BMU_contender_mil_strength')|0]"
											}
										}
									}
								}

								portrait_torso = {
									state = {
										name = "on_player_election_nomination"
										next = "nomination_shown"
										alpha = 0.5
									}
		
									state = {
										name = "nomination_shown"
										alpha = 1
										duration = 0.5
										using = Animation_Curve_Default
									}
		
									blockoverride "opinion_box" {}
									blockoverride "status_icons" {}
								}
	
								
							}
						}
						# hbox = {
						# 	name = "my_candidate"
						# 	datacontext = "[Scope.Var('pressed_claim').Var('claim_target').Char]"
						# 	visible = "[Character.IsValid]"
						# 	layoutpolicy_horizontal = expanding
						# 	margin = { 70 0 }
						# 	margin_top = 20
	
						# 	state = {
						# 		name = _show
	
						# 		duration = 0.2
	
						# 		animation = {
						# 			size = { 0 500 }
						# 			bezier = { 0 0.5 0.5 1 }
						# 		}
	
						# 		animation = {
						# 			alpha = 1
						# 			bezier = { 0.5 0 1 0.5 }
						# 		}
						# 	}
	
						# 	state = {
						# 		name = _hide
						# 		size = { 0 0 }
						# 		alpha = 0
						# 	}
	
						# 	state = {
						# 		name = "add_candidate"
						# 		alpha = 0
						# 		duration = 0.2
						# 		next = "b"
						# 		using = Animation_Curve_Default
						# 	}
	
						# 	state = {
						# 		name = "b"
						# 		alpha = 1
						# 		duration = 0.2
						# 		using = Animation_Curve_Default
						# 	}
	
						# 	vbox = {
						# 		layoutpolicy_vertical = expanding
	
						# 		vbox = {
						# 			spacing = 5
	
						# 			text_label_center = {
						# 				layoutpolicy_horizontal = expanding
						# 				text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE"
						# 			}
	
						# 			text_single = {
						# 				text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE_INFO"
						# 				default_format = "#high"
						# 				using = Font_Size_Big
						# 			}
	
						# 			text_single = {
						# 				text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE_STANCE"
						# 			}
	
						# 			text_single = {
						# 				text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE_NOT_MY_DYNASTY"
						# 				visible = "[Not( ObjectsEqual( Character.GetDynasty, GetPlayer.GetDynasty ) )]"
						# 			}
	
						# 			expand = {
						# 				minimumsize = { 0 10 }
						# 			}
	
						# 			hbox = {
						# 				spacing = 20
						# 				margin_top = 10
	
						# 				text_single = {
						# 					datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"
						# 					text = "SUCCESSION_ELECTION_WINDOW_CANDIDATE_RANK"
						# 					using = Font_Size_Medium
						# 				}
	
						# 				hbox = {
						# 					spacing = 4
						# 					tooltip = "SUCCESSION_ELECTION_WINDOW_CANDIDATE_SCORE"
	
						# 					vote_amount_icon = {}
	
						# 					text_single = {
						# 						text = "[SuccessionElectionWindowCandidate.GetScore|V]"
						# 						using = Font_Size_Medium
						# 					}
						# 				}
						# 			}
	
						# 			hbox = {
						# 				tooltip = "[SuccessionElectionWindow.GetElectorVoteStrengthBreakdown( GetPlayer )]"
	
						# 				text_single = {
						# 					text = "SUCCESSION_ELECTION_WINDOW_MY_VOTING_STRENGTH"
						# 					max_width = 180
						# 					default_format = "#low"
						# 				}
	
						# 				vote_strength_icon = {}
	
						# 				text_single = {
						# 					text = "[SuccessionElectionWindow.GetVoteStrength( GetPlayer )|V]"
						# 					max_width = 30
						# 					default_format = "#low"
						# 					using = Font_Size_Medium
						# 				}
						# 			}
						# 		}
						# 	}
	
						# 	portrait_torso = {
						# 		state = {
						# 			name = "on_player_election_nomination"
						# 			next = "nomination_shown"
						# 			alpha = 0.5
						# 		}
	
						# 		state = {
						# 			name = "nomination_shown"
						# 			alpha = 1
						# 			duration = 0.5
						# 			using = Animation_Curve_Default
						# 		}
	
						# 		blockoverride "opinion_box" {}
						# 		blockoverride "status_icons" {}
						# 	}
						# }
					}
					#Tabs
					hbox = {
						layoutpolicy_horizontal = expanding

						button_tab = {
							layoutpolicy_horizontal = expanding
							text = "BMU_CLAIM_WINDOW_CLAIMANTS"

							onclick = "[GetVariableSystem.Set('BMU_claim_window_tab','claimants')]"
							down = "[GetVariableSystem.HasValue('BMU_claim_window_tab','claimants')]"

							text_single = {
								parentanchor = vcenter|right
								position = { -20 -2 }
								text = "[GetDataModelSize(Story.MakeScope.GetList('claimants'))]"

								default_format = "#low"

								alpha = "[Select_float( GreaterThan_int32(GetDataModelSize(Story.MakeScope.GetList('claimants')), '(int32)0'), '(float)1.0', '(float)0.5' )]"
							}
						}

						button_tab = {
							layoutpolicy_horizontal = expanding
							text = "BMU_CLAIM_WINDOW_CONTENDERS"

							onclick = "[GetVariableSystem.Set('BMU_claim_window_tab','contender')]"
							down = "[GetVariableSystem.HasValue('BMU_claim_window_tab','contender')]"

							text_single = {
								parentanchor = vcenter|right
								position = { -20 -2 }
								text = "[GetDataModelSize(Story.MakeScope.GetList('contender'))]"

								default_format = "#low"

								alpha = "[Select_float( GreaterThan_int32(GetDataModelSize(Story.MakeScope.GetList('contender')), '(int32)0'), '(float)1.0', '(float)0.5' )]"
							}
						}

						button_tab = {
							layoutpolicy_horizontal = expanding
							text = "BMU_CLAIM_WINDOW_STAKEHOLDERS"

							onclick = "[GetVariableSystem.Set('BMU_claim_window_tab','stakeholder')]"
							down = "[GetVariableSystem.HasValue('BMU_claim_window_tab','stakeholder')]"

							text_single = {
								parentanchor = vcenter|right
								position = { -20 -2 }
								text = "[GetDataModelSize(Story.MakeScope.GetList('stakeholder'))]"

								default_format = "#low"

								alpha = "[Select_float( GreaterThan_int32(GetDataModelSize(Story.MakeScope.GetList('stakeholder')), '(int32)0'), '(float)1.0', '(float)0.5' )]"
							}
						}

						# button_tab = {
						# 	layoutpolicy_horizontal = expanding
						# 	text = "BMU_CLAIM_WINDOW_SUPPORTERS"

						# 	onclick = "[GetVariableSystem.Set('BMU_claim_window_tab','supporters')]"
						# 	down = "[GetVariableSystem.HasValue('BMU_claim_window_tab','supporters')]"

						# 	text_single = {
						# 		parentanchor = vcenter|right
						# 		position = { -20 -2 }
						# 		text = "[GetDataModelSize(Story.MakeScope.GetList('supporters'))]"

						# 		default_format = "#low"

						# 		alpha = "[Select_float( GreaterThan_int32(GetDataModelSize(Story.MakeScope.GetList('supporters')), '(int32)0'), '(float)1.0', '(float)0.5' )]"
						# 	}
						# }
					}
					#Claimants
					vbox = {
						datacontext = "[Scope.Var('pressed_claim').Story]"
						visible = "[GetVariableSystem.HasValue('BMU_claim_window_tab','claimants')]"
						margin_bottom = 10
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						scrollbox = {
							visible = "[GetVariableSystem.HasValue('BMU_claim_window_tab','claimants')]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							blockoverride "scrollbox_content" {
								datamodel = "[Story.MakeScope.GetList('BMU_pressed_claim_stakeholders')]"
								item = {
									hbox = {
										datacontext = "[Scope.Var('stakeholder').Char]"
										visible = "[Scope.Var('claimant').IsSet]"
										layoutpolicy_horizontal = expanding
										# state = {
										# 	name = _show
										# 	on_start = "[GetVariableSystem.Set('BMU_claim_window_tab','supporters')]"
										# 	# on_start = "[GetScriptedGui('BMU_test').Execute(GuiScope.SetRoot(Character.MakeScope).End)]"
										# }
										
										
										spacer = {
											visible = "[Not(Scope.Var('status').IsSet)]"
											size = { 44 44 }
										}
										

										icon_doctrine = {
											visible = "[EqualTo_string(Scope.Var('status').GetFlagName,'dropout')]"
											size = { 44 44 }
											texture = "gfx/interface/icons/press_claim_status.dds"
											framesize = { 70 70 }
											frame = 1
										}

										icon_doctrine = {
											visible = "[EqualTo_string(Scope.Var('status').GetFlagName,'contender')]"
											size = { 44 44 }
											texture = "gfx/interface/icons/press_claim_status.dds"
											framesize = { 70 70 }
											frame = 2
										}

										icon_doctrine = {
											visible = "[EqualTo_string(Scope.Var('status').GetFlagName,'stakeholder')]"
											size = { 44 44 }
											texture = "gfx/interface/icons/press_claim_status.dds"
											framesize = { 70 70 }
											frame = 3
										}

										BMU_widget_character_list_item = {
											minimumsize = { 700 0 }
											
										}

										text_single = {
											text = "[GuiScope.SetRoot(Character.MakeScope).AddScope('coveted_title',Scope.Var('pressed_claim').Var('claimed_title').Title.MakeScope).ScriptValue('FF_ambition_get_title')]"
											tooltip = "[GuiScope.SetRoot(Character.MakeScope).AddScope('coveted_title',Scope.Var('pressed_claim').Var('claimed_title').Title.MakeScope).GetScriptValueDesc('FF_ambition_get_title')]"
										}

										spacer = {
											size = { 10 0 }
										}

										text_single = {
											text = "[GuiScope.SetRoot(Character.MakeScope).AddScope('candidate',Scope.Var('pressed_claim').Var('claimed_title').Title.GetHolder.MakeScope).AddScope('story',Scope.Var('pressed_claim').Story.MakeScope).ScriptValue('candidate_score')]"
											tooltip = "[GuiScope.SetRoot(Character.MakeScope).AddScope('candidate',Scope.Var('pressed_claim').Var('claimed_title').Title.GetHolder.MakeScope).AddScope('story',Scope.Var('pressed_claim').Story.MakeScope).GetScriptValueDesc('candidate_score')]"
										}

										spacer = {
											size = { 10 0 }
										}

										text_single = {
											text = "[GuiScope.SetRoot(Character.MakeScope).AddScope('candidate',GetPlayer.MakeScope).AddScope('story',Scope.Var('pressed_claim').Story.MakeScope).ScriptValue('candidate_score')]"
											tooltip = "[GuiScope.SetRoot(Character.MakeScope).AddScope('candidate',GetPlayer.MakeScope).AddScope('story',Scope.Var('pressed_claim').Story.MakeScope).GetScriptValueDesc('candidate_score')]"
										}
										
										# vbox = {
										# 	# visible = "[GetScriptedGui('BMU_candidate_picked').IsShown(GuiScope.SetRoot(Character.MakeScope).AddScope('story',Story.MakeScope).End)]"
										# 	vbox = {
										# 		datamodel = "[Story.MakeScope.GetList('vote_stories')]"
										# 		item = {
										# 			hbox = {
										# 				# state = {
										# 				# 	name = _show
										# 				# 	on_start = "[GetScriptedGui('BMU_test').Execute(GuiScope.SetRoot(Character.MakeScope).End)]"
										# 				# }
										# 				portrait_head_small = {
										# 					visible = "[Scope.Var('top_candidate').IsSet]"
										# 					datacontext = "[Scope.Var('top_candidate').Char]"
										# 				}
										# 				text_single = {
										# 					# visible = "[And(Scope.Var('status').IsSet,Not(Scope.Var('status').GetFlagName)]"
										# 					text = "[Scope.Var('status').GetFlagName]"
										# 				}
										# 				text_single = {
										# 					visible = "[EqualTo_string(Scope.Var('status').GetFlagName,'supporter')]"
										# 					text = "[Character.MakeScope.ScriptValue('top_candidate_score')]"
										# 					tooltip = "[Character.MakeScope.GetScriptValueDesc('top_candidate_score')]"
										# 				}
										# 			}
										# 		}
										# 	}
										# }
										
										

										expand = {}
									}
								}
							}
						}
					}
					#Contenders
					vbox = {
						datacontext = "[Scope.Var('pressed_claim').Story]"
						visible = "[GetVariableSystem.HasValue('BMU_claim_window_tab','contender')]"
						margin_bottom = 10
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						scrollbox = {
							# visible = "[GetVariableSystem.HasValue('BMU_claim_window_tab','contender')]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							blockoverride "scrollbox_content" {
								vbox = {
									layoutpolicy_horizontal = expanding
									datamodel = "[Story.MakeScope.GetList('BMU_pressed_claim_stakeholders')]"
									item = {
										hbox = {
											visible = "[EqualTo_string(Scope.Var('status').GetFlagName,GetVariableSystem.Get('BMU_claim_window_tab'))]"
											datacontext = "[Scope.Var('stakeholder').Char]"
											layoutpolicy_horizontal = expanding
											BMU_widget_character_list_item = {
												blockoverride "claims_visibility" {
													visible = no
												}
												minimumsize = { 600 0 }
												
											}
											expand = {}
										}
									}
								}
							}
						}
						expand = {
						}
					}
					# #Stakeholders
					vbox = {
						datacontext = "[Scope.Story]"
						visible = "[GetVariableSystem.HasValue('BMU_claim_window_tab','stakeholder')]"
						margin_bottom = 10
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						scrollbox = {
							# visible = "[GetVariableSystem.HasValue('BMU_claim_window_tab','contender')]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							blockoverride "scrollbox_content" {
								vbox = {
									layoutpolicy_horizontal = expanding
									datamodel = "[Story.MakeScope.Var('pressed_claim').GetList('BMU_pressed_claim_stakeholders')]"
									item = {
										vbox = {
											visible = "[Or(EqualTo_string(Scope.Var('status').GetFlagName,'supporter'),EqualTo_string(Scope.Var('status').GetFlagName,'stakeholder'))]"
											datacontext = "[Scope.Var('stakeholder').Char]"
											layoutpolicy_horizontal = expanding
											hbox = {
												layoutpolicy_horizontal = expanding
												margin = { 0 5 }

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[Character.GetNameNoTooltip]"
													align = nobaseline
													max_width = 535
												}

												background = {
													using = Background_Area
												}
											}
											hbox = {
												layoutpolicy_horizontal = expanding
												portrait_head_small = {
												}
												portrait_head_small = {
													datacontext = "[Scope.Var('top_candidate').Char]"
												}
												vbox = {
													text_single = {
														visible = "[ObjectsEqual(Character.GetLiege,Story.MakeScope.Var('pressed_claim').Var('claim_target').Char)]"
														raw_text = "Loyalty [Character.MakeScope.ScriptValue('FF_loyalty')|0]"
														tooltip = "[Character.MakeScope.GetScriptValueDesc('FF_loyalty')|0]"
													}
													text_single = {
														raw_text = "Claim Target [GuiScope.SetRoot(Character.MakeScope).AddScope('story',Story.MakeScope.Var('pressed_claim').Story.MakeScope).AddScope('candidate',Story.MakeScope.Var('pressed_claim').Story.MakeScope.Var('claim_target').Char.MakeScope).ScriptValue('candidate_score')|0]"
														tooltipwidget = BMU_support_score_tooltip
													}
													text_single = {
														raw_text = "Top Contender [GuiScope.SetRoot(Character.MakeScope).AddScope('story',Story.MakeScope.Var('pressed_claim').Story.MakeScope).AddScope('candidate',Story.MakeScope.Var('pressed_claim').Story.MakeScope.Var('top_contender').Char.MakeScope).ScriptValue('candidate_score')|0]"
														tooltip = "[GuiScope.SetRoot(Character.MakeScope).AddScope('story',Story.MakeScope.Var('pressed_claim').Story.MakeScope).AddScope('candidate',Story.MakeScope.Var('pressed_claim').Story.MakeScope.Var('top_contender').Char.MakeScope).GetScriptValueDesc('candidate_score')|0]"
													}
												}
												icon = {
													texture = "gfx/interface/icons/icon_domain.dds"
													size = { 50 50 }
													tooltipwidget = BMU_stakeholder_ambition_tooltip
												}
												expand = {}
											}
											expand = {}
										}
									}
								}
							}
						}
						expand = {
						}
					}

					expand = {
						layoutpolicy_vertical = growing
					}
				}
			}
		}
	}
}

window = {
	name = "BMU_claim_icon"
	widgetid = "BMU_claim_icon"
	position = { 460 -40 }
	layer = hud_layer
	# filter_mouse = all
	alwaystransparent = no
	parentanchor = bottom|left
	allow_outside = yes

	# using = Window_Background_Sidebar
	# using = Window_Decoration
	using = Window_Movable

	background = {
        texture = "gfx/interface/skinned/button_hud_character_bar.dds"
        spriteType = Corneredtiled
        spriteborder = { 18 0 }
        texture_density = 2

        modify_texture = {
            texture = "gfx/interface/component_overlay/overlay_effect.dds"
            blend_mode = overlay
        }

        block "bg_margins"
        {
            margin = { -23 -17 }
        }
    }

	hbox = {
		
		# flowcontainer = {
		# 	ignoreinvisible = yes
		# 	datamodel = "[GetGlobalList('BMU_claim_stories')]"
		# 	item = {
		# 		widget = {
		# 			# allow_outside = yes
		# 			parentanchor = bottom
		# 			datacontext = "[Scope.Var('claimed_title').Title]"
		# 			visible = "[ObjectsEqual(Scope.Var('claim_target').Char,GetPlayer)]"
		# 			# visible = no
		# 			size = { 40 40 }
		# 			# coa_title_tiny_crown = {
						
		# 			# 	parentanchor = bottom
		# 			# 	position = { 0 3 }
		# 			# 	using = tooltip_ne
		# 			# 	scale = 0.92
			
		# 			# 	# blockoverride "coa_button"
		# 			# 	# {
		# 			# 	# 	alwaystransparent = yes
		# 			# 	# }
			
		# 			# 	blockoverride "coa_tooltip"
		# 			# 	{}
		# 			# }
		# 			coa_title_tiny_crown = {
		# 				parentanchor = bottom
		# 				blockoverride "coa_button"
		# 				{
		# 					onclick = "[GetVariableSystem.SetOrToggle('BMU_claim_window',Scope.Var('claimed_title').Title.GetKey)]"
		# 				}
		# 			}
		# 		}
		# 	}
		# }

		flowcontainer = {
			ignoreinvisible = yes
			datamodel = "[GetPlayer.MakeScope.GetList('BMU_pressed_claim_stakeholders')]"
			item = {
				widget = {
					# allow_outside = yes
					datacontext = "[Scope.Var('pressed_claim').Var('claimed_title').Title]"
					# visible = "[And(Not(ObjectsEqual(Scope.Var('claim_target').Char,GetPlayer)),GetScriptedGui('BMU_claim_window').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('story',Scope.Self).End))]"
					# visible = "[Not(ObjectsEqual(Scope.Var('claim_target').Char,GetPlayer))]"
					# visible = "[And(Not(ObjectsEqual(Scope.Var('claim_target').Char,GetPlayer)),GetScriptedGui('BMU_claim_player_involved').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('story',Scope.Story.MakeScope).End))]"
					size = { 40 40 }
					coa_title_tiny_crown = {
						parentanchor = bottom
						blockoverride "coa_button"
						{
							onclick = "[GetVariableSystem.SetOrToggle('BMU_claim_window',Scope.Var('pressed_claim').Var('claimed_title').Title.GetKey)]"
						}
					}
				}
			}
		}
	}
}

types BMU_Lists {
	type BMU_widget_character_list_item = widget {
		parentanchor = left
		# datacontext = "[Scope.Char]"
		size = { 10 110 }

		block "divider" {
			divider = {
				parentanchor = bottom|hcenter
				size = { 100% 3 }
			}
		}

		block "widget" {}

		hbox = {
			margin = { 0 5 }
			spacing = 15

			portrait_head_small = {}

			button_standard = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				# onclick = "[CharacterListItem.OnClick('character')]"
				# enabled = "[CharacterListItem.IsSelectable]"
				# tooltip = "[CharacterListItem.GetUnselectableReason]"

				framesize = { 249 78 }
				spriteType = Corneredtiled
				spriteborder = { 20 20 }
				texture = "gfx/interface/buttons/button_entry_characterlist.dds"

				block "button" {}

				character_list_arrow = {
					name = "character_list_arrow"
				}

				block "overlay" {
					using = default_character_list_overlay
				}

				block "button_content"
				{
					hbox = {
						layoutpolicy_horizontal = expanding
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							# Name and age
							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_left = 10

								text_single = {
									layoutpolicy_horizontal = expanding
									using = Font_Size_Medium
									autoresize = no
									alwaystransparent = yes

									text = "[Character.GetUINameNoTooltip]"
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									using = character_age_or_death_text
									blockoverride "list_layout" {}

									block "character_relation"
									{
										text_single = {
											name = "character_relation"
											layoutpolicy_horizontal = expanding
											raw_text = "|  [Character.GetRelationToString( GetPlayer )]"
											tooltip = "EXTENDED_RELATIONS_TOOLTIP"
											default_format = "#low"
											autoresize = no
											align = nobaseline
											visible = "[Character.HasRelationTo( GetPlayer )]"
											alwaystransparent = yes
										}

										expand = {
											visible = "[Not(Character.HasRelationTo( GetPlayer ))]"
										}
									}
								}
							}

							# Dynasty
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_left = 5

								widget = {
									size = { 45 60 }

									coa_house_small = {
										datacontext = "[Character.GetHouse]"
										scale = 0.7
									}
								}

								# Traits

								# fixedgridbox = {
								# 	name = "traits_grid"
								# 	datamodel = "[CharacterListItem.GetTraits]"
								# 	flipdirection = yes
								# 	size = { 150 60 }
								# 	addcolumn = 30
								# 	addrow = 45
								# 	maxhorizontalslots = 8
								# 	maxverticalslots = 1

								# 	item = {
								# 		container = {
								# 			visible = "[Trait.IsValid]"

								# 			icon_trait = {
								# 				blockoverride "icon_size"
								# 				{
								# 					size = { 30 30 }
								# 				}

								# 				blockoverride "tooltip_placement"
								# 				{
								# 					using = tooltip_se
								# 				}

								# 				blockoverride "glow_radius"
								# 				{
								# 					glow_radius = 3
								# 				}
								# 			}
								# 		}
								# 	}
								# }

								block "bottom_middle_box" {
									expand  = {}
								}

								# text_single = {
								# 	text = "[Character.MakeScope.ScriptValue('candidate_score')]"
								# 	tooltip = "[Character.MakeScope.GetScriptValueDesc('candidate_score')]"
								# }

								# spacer = {
								# 	size = { 10 0 }
								# }

								# text_single = {
								# 	text = "[ROOT.Char.GetNameNoTooltip]"
								# }

								# text_single = {
								# 	text = "[GuiScope.SetRoot(Character.MakeScope).AddScope('candidate',Character.MakeScope).AddScope('story',Story.MakeScope).ScriptValue('candidate_score')]"
								# 	tooltip = "[GuiScope.SetRoot(Character.MakeScope).AddScope('candidate',Character.MakeScope).AddScope('story',Story.MakeScope).GetScriptValueDesc('candidate_score')]"
								# }
							}
						}

						expand = {}

						vbox = {
							minimumsize = { 200 0 }
							# datacontext = "[CharacterListItem.GetCharacter]"
							layoutpolicy_vertical = expanding
							margin_top = 5
							margin_right = 5

							# Skills
							hbox = {
								name = "skills_grid"
								layoutpolicy_horizontal = expanding

								expand = {}

								hbox = {
									widget = {
										size = { 32 25 }

										text_single = {
											name = "value"
											parentanchor = center
											margin_bottom = 4
											align = center
											text = "[Character.MakeScope.ScriptValue('gui_diplomacy')]"
											tooltip = "[SkillItem.GetName]"
										}

										background = {
											name = "skill_icon_bg"
											texture = "gfx/interface/window_character/character_view_skills_bg.dds"
											framesize = { 70 26 }
											margin = { 5 0 }

											block "bg"
											{
												frame = 1
											}
										}

									}
									widget = {
										size = { 32 25 }

										text_single = {
											name = "value"
											parentanchor = center
											margin_bottom = 4
											align = center
											text = "[Character.MakeScope.ScriptValue('gui_martial')]"
											tooltip = "[SkillItem.GetName]"
										}

										background = {
											name = "skill_icon_bg"
											texture = "gfx/interface/window_character/character_view_skills_bg.dds"
											framesize = { 70 26 }
											margin = { 5 0 }

											block "bg"
											{
												frame = 2
											}
										}

									}
									widget = {
										size = { 32 25 }

										text_single = {
											name = "value"
											parentanchor = center
											margin_bottom = 4
											align = center
											text = "[Character.MakeScope.ScriptValue('gui_stewardship')]"
											tooltip = "[SkillItem.GetName]"
										}

										background = {
											name = "skill_icon_bg"
											texture = "gfx/interface/window_character/character_view_skills_bg.dds"
											framesize = { 70 26 }
											margin = { 5 0 }

											block "bg"
											{
												frame = 3
											}
										}

									}
									widget = {
										size = { 32 25 }

										text_single = {
											name = "value"
											parentanchor = center
											margin_bottom = 4
											align = center
											text = "[Character.MakeScope.ScriptValue('gui_intrigue')]"
											tooltip = "[SkillItem.GetName]"
										}

										background = {
											name = "skill_icon_bg"
											texture = "gfx/interface/window_character/character_view_skills_bg.dds"
											framesize = { 70 26 }
											margin = { 5 0 }

											block "bg"
											{
												frame = 4
											}
										}

									}
									widget = {
										size = { 32 25 }

										text_single = {
											name = "value"
											parentanchor = center
											margin_bottom = 4
											align = center
											text = "[Character.MakeScope.ScriptValue('gui_learning')]"
											tooltip = "[SkillItem.GetName]"
										}

										background = {
											name = "skill_icon_bg"
											texture = "gfx/interface/window_character/character_view_skills_bg.dds"
											framesize = { 70 26 }
											margin = { 5 0 }

											block "bg"
											{
												frame = 5
											}
										}

									}
								}
							}

							expand = {}

							block "bottom_right_box"
							{
								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									# Realm
									widget = {
										size = {55 58 }
										# visible = "[Not( IsDataModelEmpty( Character.GetTitles ) )]"

										block "claims_visibility" {}

										datacontext = "[Story.MakeScope.Var('claimed_title').Title]"

										coa_title_tiny_crown = {
											using = tooltip_ne
											

											highlight_icon = {
												name = "pressed_claim"
												visible = "[GetScriptedGui('BMU_has_strong_claim').IsShown(GuiScope.SetRoot(Character.MakeScope).AddScope('title',Title.MakeScope).End)]"
												texture = "gfx/interface/icons/title_status/icon_claim_pressed.dds"
												size = { 24 24 }
												parentanchor = bottom|right
											}

											highlight_icon = {
												name = "unpressed_claim"
												visible = "[GetScriptedGui('BMU_has_weak_claim').IsShown(GuiScope.SetRoot(Character.MakeScope).AddScope('title',Title.MakeScope).End)]"
												texture = "gfx/interface/icons/title_status/icon_claim_unpressed.dds"
												size = { 24 24 }
												parentanchor = bottom|right
											}

											highlight_icon = {
												name = "implicit_claim"
												visible = "[GetScriptedGui('BMU_has_implicit_claim').IsShown(GuiScope.SetRoot(Character.MakeScope).AddScope('title',Title.MakeScope).End)]"
												texture = "gfx/interface/icons/title_status/icon_claim_implicit.dds"
												size = { 24 24 }
												parentanchor = bottom|right
											}

											blockoverride "coa_tooltip"
											{
												
											}
										}

										# text_single = {
										# 	align = right
										# 	minimumsize = { 15 0 }
										# 	parentanchor = vcenter|right
										# 	text = "[CharacterListItem.GetTitleItemCount]"
										# 	tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
										# }
									}

									expand = {}

									# Religion
									icon = {
										name = "faith_button"
										size = { 35 35 }
										datacontext = "[Character.GetFaith]"
										tooltipwidget = { faith_tooltip = {} }
										texture = "[Faith.GetIcon]"
									}

									widget = {
										datacontext = "[Character.GetCulture]"
										size = { 120 24 }

										tooltipwidget = {
											culture_tooltip = {}
										}
										using = tooltip_se

										hbox = {
											spacing = 3

											icon = {
												name = "culture"
												texture = "gfx/interface/icons/icon_culture.dds"
												size = { 24 24 }
											}

											text_multi = {
												layoutpolicy_horizontal = expanding
												min_width = 95
												max_width = 95
												autoresize = yes
												text = "CULTURE_LISTS_WINDOW"
											}
										}
									}
								}
							}
						}

						
					}
				}
			}
		}
	}
}

types BMU_portraits {
	 type portrait_torso_small = widget {
        size = { 200 200 }

        widget = {
            size = { 100% 100% }
            using = Portrait_Background_Glows
        }

        portrait_button = {
            parentanchor = bottom|hcenter
            size = { 200 200 }
            using = portrait_base

            block "portrait_texture"
            {
                portrait_texture = "[Character.GetPortrait('environment_torso', 'camera_torso', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
            }
            mask = "gfx/portraits/portrait_mask_torso.dds"
            effectname = "NoHighlight"

            highlight_icon = {
                name = "prison_bars"
                visible = "[Character.IsImprisoned]"
                size = { 100% 100% }
                effectname = "NoHighlight"
                texture = "gfx/portraits/portrait_prison_torso.dds"

                modify_texture = {
                    name = "mask"
                    texture = "gfx/portraits/portrait_mask_torso.dds"
                    spriteType = Corneredstretched
                    blend_mode = alphamultiply
                }
            }

            block "portrait_button" {}
        }

        portrait_status_icons = {
            parentanchor = bottom|left
            position = { 43 -6 }
            scale = 0.85

            background = {
                using = Background_Area_Dark
                margin = { 2 3 }
                alpha = 0.8
            }
        }

        block "coa" {
            coa_realm_small_crown = {
                visible = "[Character.HasLandedTitles]"
                parentanchor = bottom|left
                position = { -2 1 }
            }
        }

        block "opinion_box"
        {
            portrait_opinion = {
                parentanchor = bottom|hcenter
                position = { 4 -2 }
            }
        }

        #portrait unknown glow
        button = {
            name = "portrait_unknown_torso_glow"
            parentanchor = center
            position = { 0 -12 }
            gfxtype = framedbuttongfx
            effectname = "NoHighlight"
            texture = "gfx/portraits/unknown_portraits/button_unknown.dds"
            size = { 195 225 }
            framesize = { 554 780 }
            upframe = 1
            overframe = 2

            block "glow_visible" {

                visible = "[Not(Character.IsValid)]"

            }

            block "glow_flip" {}

            block "onclick" {}
        }
    }
}

template BMU_support_score_tooltip {
	container = {
		alwaystransparent = no

		widget = {
			name = "background"
			using = Background_Tooltip
			size = { 100% 100% }
			alwaystransparent = no
		}

		container = {
			# visible = "[And( Title.CanCharacterControlVote(Character.Self), SuccessionElectionWindow.GetTitle.GetPlayerNominee.IsValid )]"

			flowcontainer = {
				visible = "[Not(Character.IsPlayer)]"
				direction = vertical
				margin = { 10 10 }
				ignoreinvisible = yes
				
				flowcontainer = {
					direction = horizontal
					ignoreinvisible = yes
					
					flowcontainer = {
						visible = "[Not(ObjectsEqual(Scope.Var('top_candidate').Char,Story.MakeScope.Var('pressed_claim').Var('claim_target').Char))]"
						margin = { 10 5 }
						direction = vertical

						background = {
							using = Background_Area
						}

						text_multi = {
							autoresize = yes
							minimumsize = { 250 -1 }
							maximumsize = { 250 -1 }
							multiline = yes
							text = "BMU_CLAIM_WINDOW_SUPPORT_BREAKDOWN_TARGET_TT"
							fonttintcolor = "[TooltipInfo.GetTintColor]"
						}

						text_multi = {
							autoresize = yes
							minimumsize = { 250 -1 }
							maximumsize = { 250 -1 }
							multiline = yes
							fonttintcolor = "[TooltipInfo.GetTintColor]"
							text = "[GuiScope.SetRoot(Character.MakeScope).AddScope('story',Story.MakeScope.Var('pressed_claim').Story.MakeScope).AddScope('candidate',Story.MakeScope.Var('pressed_claim').Story.MakeScope.Var('claim_target').Char.MakeScope).GetScriptValueDesc('candidate_score')|0]"
						}
					}

					# widget = {
					# 	visible = "[Not( SuccessionElectionWindowElector.IsVoteForPlayer )]"
					# 	size = { 5 0 }
					# }

					flowcontainer = {
						visible = "[Scope.Var('top_candidate').IsSet]"
						margin = { 10 5 }
						direction = vertical

						background = {
							using = Background_Area
						}

						text_multi = {
							autoresize = yes
							minimumsize = { 250 -1 }
							maximumsize = { 250 -1 }
							multiline = yes
							text = "BMU_CLAIM_WINDOW_SUPPORT_BREAKDOWN_SUPPORTER_TT"
							fonttintcolor = "[TooltipInfo.GetTintColor]"
						}

						text_multi = {
							autoresize = yes
							minimumsize = { 250 -1 }
							maximumsize = { 250 -1 }
							multiline = yes
							fonttintcolor = "[TooltipInfo.GetTintColor]"
							text = "[GuiScope.SetRoot(Character.MakeScope).AddScope('story',Story.MakeScope.Var('pressed_claim').Story.MakeScope).AddScope('candidate',Scope.Var('top_candidate').Char.MakeScope).GetScriptValueDesc('candidate_score')|0]"
						}
					}

					flowcontainer = {
						visible = "[And(Not(ObjectsEqual(Scope.Var('top_candidate').Char,Story.MakeScope.Var('top_candidate').Char)),Not(ObjectsEqual(Story.MakeScope.Var('pressed_claim').Var('claim_target').Char,GetPlayer.Self)))]"
						margin = { 10 5 }
						direction = vertical

						background = {
							using = Background_Area
						}

						text_multi = {
							autoresize = yes
							minimumsize = { 250 -1 }
							maximumsize = { 250 -1 }
							multiline = yes
							text = "BMU_CLAIM_WINDOW_SUPPORT_BREAKDOWN_PLAYER_CANDIDATE_TT"
							fonttintcolor = "[TooltipInfo.GetTintColor]"
						}

						text_multi = {
							autoresize = yes
							minimumsize = { 250 -1 }
							maximumsize = { 250 -1 }
							multiline = yes
							fonttintcolor = "[TooltipInfo.GetTintColor]"
							text = "[GuiScope.SetRoot(Character.MakeScope).AddScope('story',Story.MakeScope.Var('pressed_claim').Story.MakeScope).AddScope('candidate',Story.MakeScope.Var('top_candidate').Char.MakeScope).GetScriptValueDesc('candidate_score')|0]"
						}
					}
				}

				# text_multi = {
				# 	margin = { 5 0 }
				# 	visible = "[SuccessionElectionWindow.CouldVoteForPlayerCandidateInstead( Character.Self )]"
				# 	text = "SUCCESSION_ELECTION_WINDOW_VOTE_BREAKDOWN_PLAYER_NOMINEE_INFO"
				# 	autoresize = no
				# 	max_width = 520
				# 	size = { 100% 50 }
				# 	fonttintcolor = "[TooltipInfo.GetTintColor]"
				# }
			}

			# text_multi = {
			# 	visible = "[Character.IsOtherPlayer]"

			# 	margin = { 10 5 }
			# 	align = left|nobaseline
			# 	autoresize = yes
			# 	minimumsize = { 270 -1 }
			# 	maximumsize = { 270 -1 }

			# 	text = "SUCCESSION_ELECTION_WINDOW_VOTE_BREAKDOWN_IS_OTHER_PLAYER"
			# 	fonttintcolor = "[TooltipInfo.GetTintColor]"
			# }

			# text_multi = {
			# 	visible = "[Character.IsLocalPlayer]"

			# 	margin = { 10 5 }
			# 	align = left|nobaseline
			# 	autoresize = yes
			# 	minimumsize = { 270 -1 }
			# 	maximumsize = { 270 -1 }
			# 	text = "SUCCESSION_ELECTION_WINDOW_VOTE_BREAKDOWN_IS_LOCAL_PLAYER"
			# 	fonttintcolor = "[TooltipInfo.GetTintColor]"
			# }
		}

		# text_multi = {
		# 	visible = "[Not( Title.CanCharacterControlVote( Character.Self ) )]"

		# 	margin = { 10 5 }
		# 	align = left|nobaseline
		# 	autoresize = yes
		# 	minimumsize = { 270 -1 }
		# 	maximumsize = { 270 -1 }
		# 	text = "SUCCESSION_ELECTION_WINDOW_VOTE_BREAKDOWN_FORCED_VOTE"
		# 	fonttintcolor = "[TooltipInfo.GetTintColor]"
		# }

		# text_single = {
		# 	visible = "[Not(Or(EqualTo_string(Scope.Var('status').GetFlagName,'contender'),EqualTo_string(Scope.Var('status').GetFlagName,'supporter')))]"
		# 	margin = { 10 10 }
		# 	text = "SUCCESSION_ELECTION_WINDOW_NO_PLAYER_NOMINEE"
		# }
	}
}

template BMU_stakeholder_ambition_tooltip {
	container = {
		
		widget = {
			name = "background"
			using = Background_Tooltip
			size = { 300 900 }
			alwaystransparent = no
		}

		container = {
			flowcontainer = {
				direction = vertical
				margin = { 10 10 }
				ignoreinvisible = yes
				vbox = {
					size = { 300 900 }
					datamodel = "[Scope.GetList('BMU_stakeholder_ambitions')]"
					item = {
						vbox = {
							hbox = {
								visible = "[EqualTo_string(Scope.Var('ambition').GetFlagName,'FF_ambition_get_title')]"
								datacontext = "[Scope.Var('coveted_title').Title]"
								coa_title_tiny_crown ={}
								text_single = {
									text = "[Scope.Var('ambition_score').GetValue|0]"
								}
							}
							hbox = {
								visible = "[EqualTo_string(Scope.Var('ambition').GetFlagName,'FF_ambition_get_child_title')]"
								datacontext = "[Scope.Var('child').Char]"
								portrait_head_small ={}
								text_single = {
									text = "[Scope.Var('ambition_score').GetValue|0]"
								}
							}
							hbox = {
								visible = "[EqualTo_string(Scope.Var('ambition').GetFlagName,'FF_ambition_get_gold')]"
								datacontext = "[Scope.Var('child').Char]"
								icon = {
									name = "gold_icon"
									size = { 30 30 }
									texture = "gfx/interface/icons/icon_gold.dds"
								}
								text_single = {
									text = "[Scope.Var('ambition_score').GetValue|0]"
								}
							}
							hbox = {
								visible = "[EqualTo_string(Scope.Var('ambition').GetFlagName,'FF_ambition_get_council_position')]"
								datacontext = "[Scope.Var('child').Char]"
								icon = {
									visible = "[EqualTo_string(Scope.Var('council_position').GetFlagName,'chancellor')]"
									size = { 30 30 }
									framesize = { 60 60 }
									frame = 1
									texture = "gfx/interface/icons/icon_skills.dds"
								}
								icon = {
									visible = "[EqualTo_string(Scope.Var('council_position').GetFlagName,'steward')]"
									size = { 30 30 }
									framesize = { 60 60 }
									frame = 3
									texture = "gfx/interface/icons/icon_skills.dds"
								}
								icon = {
									visible = "[EqualTo_string(Scope.Var('council_position').GetFlagName,'marshall')]"
									size = { 30 30 }
									framesize = { 60 60 }
									frame = 2
									texture = "gfx/interface/icons/icon_skills.dds"
								}
								icon = {
									visible = "[EqualTo_string(Scope.Var('council_position').GetFlagName,'spymaster')]"
									size = { 30 30 }
									framesize = { 60 60 }
									frame = 4
									texture = "gfx/interface/icons/icon_skills.dds"
								}
								text_single = {
									text = "[Scope.Var('ambition_score').GetValue|0]"
								}
							}
						}
					}
				}
			}
		}
	}
}
