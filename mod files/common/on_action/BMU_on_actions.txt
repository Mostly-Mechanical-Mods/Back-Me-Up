on_war_started = {
	on_actions = {
		BMU_claim_cb_white_peace_delay
	}
}

BMU_claim_cb_white_peace_delay = {
	trigger = {
		war = { using_cb = claim_cb }
	}
	effect = {
		debug_log = "BMU_claim_cb_white_peace_delay"
		debug_log_scopes = yes
		trigger_event = {
			on_action = BMU_claim_cb_white_peace
			delayed = yes
		}
	}
}

BMU_claim_cb_white_peace = {
	trigger = {
		war = { using_cb = claim_cb }
	}
	effect = {
		debug_log = "BMU_claim_cb_white_peace"
		debug_log_scopes = yes

		ordered_in_list = {
			list = target_titles
			debug_log = "target_title"
			debug_log_scopes = no
			scope:attacker = {
				set_variable = {
					name = BMU_press_claim_interaction_script
					value = prev
				}
			}	
		}
		scope:attacker = {
			run_interaction = {
				interaction = BMU_press_claim_interaction_script
				actor = scope:attacker
				recipient = scope:defender
				send_threshold = decline
			}
		}

		war = { end_war = white_peace }
		
	}
}

on_war_invalidated = {
	trigger = {
		NOT = { war = { using_cb = claim_cb }}
	}
}
# A title is lost by a character
# root = the old holder
# scope:title = the title that changes hands
# scope:new_holder = new holder.
on_title_lost = {
	on_actions = {
		# BMU_on_title_lost
	}
}

BMU_on_title_lost = {
	trigger = {
		scope:title = { has_variable = pressed_claim }
	}
	effect = {
		save_scope_as = old_holder
		random_owned_story = {
			limit = {
				story_type = BMU_pressed_claim_story
				var:claimed_title = scope:title
			}
			save_scope_as = pressed_claim
		}
		BMU_transfer_claimed_press = {
			PRESSED_CLAIM = scope:pressed_claim
			CLAIMED_TITLE = scope:title
			OLD_CLAIM_TARGET = root
			NEW_CLAIM_TARGET = scope:new_holder
		}
	}
}

# called for wars after being transferred to a new defender
# root is the primary attacker
# scope:war is the war
# scope:defender is the new defender

on_war_transferred = {
	on_actions = {
		BMU_on_war_transferred
	}
}

BMU_on_war_transferred = {
	trigger = {
		# scope:war = { using_CB = BMU_pressed_claim_cb }
		# scope:defender = {
		# 	any_owned_story = {
		# 		story_type = BMU_pressed_claim_story
		# 		this = scope:war.var:pressed_claim
		# 	}
		# }
	}
	effect = {
		if = {
			limit = { debug_only = yes }
			debug_log = "BMU_on_war_transferred"
			debug_log_scopes = yes
		}
		if = {
			limit = {
				debug_log_details = yes
				scope:war = { using_cb = BMU_pressed_claim_cb }
				scope:defender = {
					any_owned_story = {
						story_type = BMU_pressed_claim_story
						this = scope:war.var:pressed_claim
					}
				}
			}
			scope:war.var:pressed_claim = {
				every_in_list = {
					variable = BMU_pressed_claim_stakeholders
					limit = {
						NOT = { is_participant_in_war = scope:war }
						var:status = flag:supporter
						var:contender = scope:defender
					}
					scope:war = { add_defender = prev.story_owner }
				}
			}
		}
		else = {
			debug_log = "no Pressed Claim found"
		}
	}
}


# A claim is gained by a character
# root = the claimant
# scope:title = the title that is claimed
# scope:transfer_type = flag:inheritance or none
on_explicit_claim_gain = {
	on_actions = {
		BMU_claimant_tracker_on
	}
}

BMU_on_explicit_claim_gain = {
	trigger = {
		scope:title = { has_variable = pressed_claim }
	}
	effect = {
		scope:title = {
			var:pressed_claim = {
				add_to_variable_list = {
					name = claimants
					target = root
				}
			}
		}
	}
}

BMU_claimant_tracker_on = {
	trigger = {
		exists = scope:title.holder
		NOT = { has_relation_claimant = scope:title.holder }
	}
	effect = {
		set_relation_claimant = scope:title.holder
	}
}

# A claim is lost by a character
# root = the claimant
# scope:title = the title that was claimed
on_explicit_claim_lost = {
	on_actions = {
		BMU_on_explicit_claim_lost
		BMU_claimant_tracker_off
	}
}

BMU_on_explicit_claim_lost = {
	trigger = {
		scope:title = { has_variable = pressed_claim }
	}
	effect = {
		scope:title = {
			var:pressed_claim = {
				remove_list_variable = {
					name = claimants
					target = root
				}
			}
		}
	}
}

BMU_claimant_tracker_off = {
	trigger = {
		exists = scope:title.holder
		any_claim = {
			exists = holder
			holder = scope:title.holder
			count = 0
		}
	}
	effect = {
		remove_relation_claimant = scope:title.holder
	}
}

on_game_start = {
	on_actions = {
		BMU_claimant_tracker_init
	}
}

BMU_claimant_tracker_init = {
	effect = {
		every_living_character = {
			limit = { any_claim = { count > 0 }}
			every_claim = {
				limit = { exists = holder }
				if = {
					limit = { NOT = { prev = { has_relation_claimant = prev.holder }}}
					prev = { set_relation_claimant = prev.holder }
				}
			}
		}
	}
}

on_set_relation_rival = {
	on_actions = {
		BMU_on_set_relation_rival
	}
}

BMU_on_set_relation_rival = {
	trigger = {
		OR = {
			owns_story_of_type = BMU_contender_story
			scope:target = { owns_story_of_type = BMU_contender_story }
		}
	}
	effect = {
		
	}
}