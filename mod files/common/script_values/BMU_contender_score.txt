BMU_score_diff = {
	if = {
		limit = {
			scope:player = {
				any_owned_story = {
					story_type = BMU_contender_story
					var:pressed_claim_story = scope:pressed_claim
				}
			}
		}
		scope:player = {
			if = { limit = { save_temporary_scope_as = score_contender }}
			prev = { add = BMU_contender_score }
		}
	}
	subtract = {
		ordered_owned_story = {
			limit = {
				OR = {
					story_type = BMU_stakeholder_story
					story_type = BMU_supporter_story
				}
				var:pressed_claim_story = scope:pressed_claim
			}
			if = {
				limit = { scope:player = var:best_contender }
				value = var:worthy_contender_score
				min = 0
			}
			else = {
				value = var:best_contender_score
				min = 0
			}
		}
	}
}

BMU_contender_score = {
	if = {
		limit = {
			exists = scope:pressed_claim
			this = { save_temporary_scope_as = score_supporter }
			scope:pressed_claim.var:claim_target = { save_temporary_scope_as = claim_target save_temporary_scope_as = holder_candidate }
			scope:pressed_claim.var:claimed_title = { save_temporary_scope_as = claimed_title }
		}
		add = BMU_contender_score_gui
	}
	else_if = {
		limit = {
			exists = scope:actor.var:pressed_claim_interaction
			scope:actor.var:pressed_claim_interaction = { save_temporary_scope_as = pressed_claim }
			this = { save_temporary_scope_as = score_supporter }
			scope:actor.var:pressed_claim_interaction.var:claim_target = { save_temporary_scope_as = claim_target save_temporary_scope_as = holder_candidate }
			scope:actor.var:pressed_claim_interaction.var:claimed_title = { save_temporary_scope_as = claimed_title }
		}
		add = BMU_contender_score_gui
	}
}

BMU_contender_score_gui = {
	add = BMU_contender_legitimacy
	# Claim Target Liege
	if = {
		limit = {
			scope:claim_target = { is_independent_ruler = no }
			this = scope:claim_target.liege
			scope:pressed_claim = {
				any_in_list = {
					variable = contenders
					trigger_if = {
						limit = { story_owner = { is_independent_ruler = yes }}
						NOT = { story_owner.highest_held_title_tier < scope:score_supporter.highest_held_title_tier }
					}
					trigger_else = {
						NOT = { root = { is_liege_or_above_of = prev.story_owner }}
					}
				}
			}
		}
		if = {
			limit = {
				trigger_if = {
					limit = { story_owner = { is_independent_ruler = yes }}
					NOT = { scope:score_contender.highest_held_title_tier < scope:score_supporter.highest_held_title_tier }
				}
				trigger_else = {
					NOT = { root = { is_liege_or_above_of = scope:score_contender }}
				}
			}
			add = {
				value = -500
				desc = BMU_tooltip_liege_would_lose_land
				format = "FF_VALUE_FORMAT"
			}
		}
		else = {
			add = {
				value = 500
				desc = BMU_tooltip_liege_would_prevent_land_loss
				format = "FF_VALUE_FORMAT"
			}
		}
	}
	# Vassal Loyalty
	if = {
		limit = {
			is_vassal_of = scope:score_contender
			save_temporary_scope_value_as = {
				name = FF_loyalty
				value = FF_loyalty
			}
		}
		if = {
			limit = { FF_loyalty > 0 }
			add = {
				value = FF_loyalty
				desc = BMU_tooltip_FF_loyalty_pos
				format = "FF_VALUE_FORMAT"
			}
		}
		else = {
			add = {
				value = FF_loyalty
				desc = BMU_tooltip_FF_loyalty_neg
				format = "FF_VALUE_FORMAT"
			}
		}
	}
	# Allied
	if = {
		limit = { is_allied_to = scope:score_contender }
		add = {
			value = {
				add = 100
				add = ai_honor
				if = {
					limit = { scope:score_contender = scope:holder_candidate }
					multiply = 2
				}
			}
			desc = BMU_tooltip_ally
			format = "FF_VALUE_FORMAT"
		}
	}
	#Reluctance to fight
	if = {
		limit = { ai_boldness < 0 }
		add = {
			value = ai_boldness
			desc = BMU_tooltip_reluctance_to_fight
			format = "FF_VALUE_FORMAT"
		}
	}
	#In Position of Power
	if = { 
		limit = {
			NOT = { scope:score_contender = scope:claim_target }
			is_councillor_of = scope:claim_target
		}
		subtract = {
			value = {
				if = {
					limit = { has_council_position = councillor_chancellor }
					value = BMU_ambition_get_council_position_councillor_chancellor
				}
				else_if = {
					limit = { has_council_position = councillor_steward }
					value = BMU_ambition_get_council_position_councillor_steward
				}
				else_if = {
					limit = { has_council_position = councillor_marshal }
					value = BMU_ambition_get_council_position_councillor_marshal
				}
				else_if = {
					limit = { has_council_position = councillor_spymaster }
					value = BMU_ambition_get_council_position_councillor_spymaster
				}
			}
			desc = BMU_tooltip_is_councillor_of_claim_target
			format = "FF_VALUE_FORMAT"
		}
	}
	#Bargain
	if = {
		limit = {
			exists = scope:pressed_claim
			any_owned_story = {
				story_type = BMU_supporter_story
				var:pressed_claim_story = scope:pressed_claim
				exists = var:bargain
				var:bargain = { save_temporary_scope_as = bargain }
			}
		}
		if = {
			limit = { scope:bargain.var:contender.story_owner = scope:score_contender }
			add = {
				value = {
					if = {
						limit = { exists = scope:bargain }
						add = scope:bargain.var:support_score
					}
				}
				desc = BMU_tooltip_struck_bargain
				format = "FF_VALUE_FORMAT"
			}
		}
	}
	#Greed
	else_if = {
		limit = { ai_greed > 0 }
		add = {
			value = {
				subtract = ai_greed
			}
			desc = BMU_tooltip_unfulfilled_ambitions
			format = "FF_VALUE_FORMAT"
		}
	}
}

BMU_contender_legitimacy = {
	if = {
		limit = { this = scope:score_contender }
		add = BMU_elector_self_voting_pattern_feudal_elective_modifier
	}
	else = {
		add = BMU_holder_voting_pattern_feudal_elective_modifier
		add = BMU_elector_voting_pattern_circumstances_feudal_elective_modifier
		add = BMU_elector_voting_pattern_prestige_piety_feudal_elective_modifier
		add = BMU_elector_voting_pattern_traits_feudal_elective_modifier
		add = BMU_elector_voting_pattern_opinion_feudal_elective_modifier
	}
}
