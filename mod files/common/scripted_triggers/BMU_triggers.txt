# BMU_can_be_councillor_of = {
# 	$COURT_OWNER$ = { save_temporary_scope_as = court_owner }
# 	$PRESSED_CLAIM$ = { save_temporary_scope_as = pressed_claim_temp }
# 	trigger_if = {
# 		# limit = { NOT = { FF_can_be_councillor_of = { COURT_OWNER = scope:court_owner }}}
# 		OR = {
# 			is_vassal_of = scope:court_owner
# 			is_courtier_of = scope:court_owner
# 			BMU_is_claim_target_vassal_that_follows_pressed_claim = { PRESSED_CLAIM = scope:pressed_claim_temp }
# 		}
# 	}
# }

BMU_target_is_relevant_in_pressed_claim_v2 = {
	$TARGET$ = { save_temporary_scope_as = temp_target }
	$PRESSED_CLAIM$ = { save_temporary_scope_as = temp_pressed_claim }
	save_temporary_scope_as = temp_contender
	OR = {
		is_vassal_of = scope:temp_target
		scope:temp_target = { is_vassal_of = scope:temp_contender }
		is_close_family_of = scope:temp_target
		has_relation_friend = scope:temp_target
		trigger_if = {
			limit = { exists = dynasty.dynast }
			dynasty.dynast = scope:temp_target
		}
		trigger_if = {
			limit = { exists = house.house_head }
			house.house_head = scope:temp_target
		}
		has_relation_stakeholder_proxy = scope:temp_target
	}
	# always = no
}

BMU_target_is_relevant_in_pressed_claims = {
	save_temporary_scope_as = PoV
	$TARGET$ = { save_temporary_scope_as = target }
	if = { limit = { NOT = { exists = scope:pressed_claim }} $PRESSED_CLAIM$ = { save_temporary_scope_as = pressed_claim }}
	OR = {
		liege = scope:target
		is_vassal_of = scope:target
		is_close_family_of = scope:target
		has_relation_friend = scope:target
		trigger_if = {
			limit = { exists = dynasty.dynast }
			dynasty.dynast = scope:target
		}
		trigger_if = {
			limit = { exists = house.house_head }
			house.house_head = scope:target
		}
		any_relation = {
			type = rival
			any_contender_story = {
				var:pressed_claim_story = scope:pressed_claim
			}
		}
	}
}

BMU_supporter_is_relevant = {
	$SUPPORTER$ = { save_temporary_scope_as = relevant_supporter }
	scope:relevant_supporter.story_owner = {
		OR = {
			liege = prev.story_owner
			is_close_family_of = prev.story_owner
			has_relation_friend = prev.story_owner
			dynasty = prev.story_owner.dynasty
			house = prev.story_owner.house
			any_relation = {
				type = rival
				any_contender_story = {
					var:pressed_claim_story = scope:relevant_supporter.var:pressed_claim_story
				}
			}
		}
	}
}

#TODO check if below are still necessary

BMU_can_bargain = {
	$CONTENDER$ = { save_temporary_scope_as = bargaining_contender }
	$SUPPORTER$ = { save_temporary_scope_as = bargaining_supporter }
	custom_description = {
		text = BMU_bargain_already_refused
		subject = scope:bargaining_supporter.story_owner
		scope:bargaining_contender = {
			NOT = {
				is_target_in_variable_list = {
					name = bargain_blocker
					target = scope:bargaining_supporter
				}
			}
		}
	}
	trigger_if = {
		limit = { scope:bargaining_supporter.var:status = flag:stakeholder }
		scope:bargaining_contender = { BMU_supporter_is_relevant = { SUPPORTER = scope:bargaining_supporter }}
	}
	trigger_else_if = {
		limit = { scope:bargaining_supporter.var:status = flag:supporter }
		scope:contender = {
			any_in_list = {
				variable = bargains
				var:supporter = scope:bargaining_supporter
				count = 0
			}
		}
	}
	trigger_else = { always = no }
}



BMU_bargain_can_be_struck = {
	$SUPPORTER$ = { save_temporary_scope_as = bargaining_supporter }
	$CONTENDER$ = { save_temporary_scope_as = bargaining_contender }
	save_temporary_scope_as = bargain_temp
	custom_description = {
		text = BMU_bargain_already_refused
		subject = scope:bargaining_contender.var:bargainer
		scope:bargaining_contender = {
			NOT = {
				is_target_in_variable_list = {
					name = BMU_bargains_refused
					target = scope:bargain_temp
				}
			}
		}
	}
	trigger_if = {
		limit = { scope:supporter.story_owner = { is_ai = yes }}
		var:ambition_score > 0
	}
	NOR = {
		has_variable = pending
		has_variable = bargained_with
	}
	trigger_if = {
		limit = {
			exists = scope:bargain_temp
			NOT = { exists = scope:bargain }
			scope:bargain_temp = { save_temporary_scope_as = bargain }
		}
	}
	trigger_if = {
		limit = { scope:bargain.var:ambition = flag:FF_ambition_get_council_position }
		scope:bargaining_supporter.story_owner = {
			NAND = {
				is_councillor_of = scope:bargaining_contender.story_owner
				trigger_if = {
					limit = { scope:bargain.var:council_position = flag:chancellor }
					has_council_position = councillor_chancellor
				}
				trigger_else_if = {
					limit = { scope:bargain.var:council_position = flag:steward }
					has_council_position = councillor_steward
				}
				trigger_else_if = {
					limit = { scope:bargain.var:council_position = flag:marshal }
					has_council_position = councillor_marshal
				}
				trigger_else_if = {
					limit = { scope:bargain.var:council_position = flag:spymaster }
					has_council_position = councillor_spymaster
				}
				trigger_else = { always = yes }
			}
		}
		scope:bargaining_contender = {
			any_in_list = {
				variable = bargains
				has_variable = bargained_with
				var:ambition = flag:FF_ambition_get_council_position
				var:council_position = scope:bargain.var:council_position
				count = 0
			}
		}
	}
}


BMU_can_be_councillor_of = {
	is_capable_adult = yes
	is_imprisoned = no
	is_at_war_with_liege = no
	trigger_if = {
		limit = { has_variable = block_hire_councillor }
		NOT = { var:block_hire_councillor = $TARGET$ }
	}
	OR = {
		is_vassal_of = $TARGET$
		trigger_if = {
			limit = { exists = scope:pressed_claim }
			BMU_is_claim_target_vassal_that_follows_pressed_claim = { PRESSED_CLAIM = scope:pressed_claim }
		}
	}
}


BMU_ambition_can_be_councillor_of = {
	$PRESSED_CLAIM$ = { save_temporary_scope_as = pressed_claim_temp }
	$CONTENDER$ = { save_temporary_scope_as = contender_temp }
	$COUNCIL_POSITION$ = { save_temporary_scope_as = council_position_temp }
	is_capable_adult = yes
	is_imprisoned = no
	NOT = { is_at_war_with = scope:contender_temp }
	trigger_if = {
		limit = { has_variable = block_hire_councillor }
		NOT = { var:block_hire_councillor = scope:contender_temp }
	}
	trigger_if = {
		limit = { NOT = { liege = scope:contender_temp }}
		liege = scope:pressed_claim_temp.var:claim_target
		primary_title = {
			any_this_title_or_de_jure_above = {
				NOT = { this = scope:pressed_claim_temp.var:claimed_title }
				exists = holder
				holder = scope:pressed_claim_temp.var:claim_target
				count = 0
			}
		}
	}

	trigger_if = {
		limit = { scope:council_position_temp = flag:chancellor }
		BMU_can_be_chancellor_of = { COURT_OWNER = scope:contender_temp }
	}
	trigger_else_if = {
		limit = { scope:council_position_temp = flag:steward }
		BMU_can_be_chancellor_of = { COURT_OWNER = scope:contender_temp }
	}
	trigger_else_if = {
		limit = { scope:council_position_temp = flag:marshal }
		BMU_can_be_steward_of = { COURT_OWNER = scope:contender_temp }
	}
	trigger_else_if = {
		limit = { scope:council_position_temp = flag:spymaster }
		BMU_can_be_spymaster_of = { COURT_OWNER = scope:contender_temp }
	}
	trigger_else = {
		always = yes
	}
}

BMU_can_be_chancellor_of = {
	NOT = { has_council_position = councillor_spouse }
	OR = {
		is_ruler = yes
		AND = {
			is_female = yes
			$COURT_OWNER$.faith = { NOT = { has_doctrine_parameter = male_dominated_council } }
		}
		AND = {
			is_male = yes
			$COURT_OWNER$.faith = { NOT = { has_doctrine_parameter = female_dominated_council } }
		}
	}
}

BMU_can_be_steward_of = {
	NOT = { has_council_position = councillor_spouse }
	OR = {
		is_ruler = yes
		AND = {
			is_female = yes
			$COURT_OWNER$.faith = { NOT = { has_doctrine_parameter = male_dominated_council } }
		}
		AND = {
			is_male = yes
			$COURT_OWNER$.faith = { NOT = { has_doctrine_parameter = female_dominated_council } }
		}
	}
}

BMU_can_be_marshal_of = {
	NOT = { has_council_position = councillor_spouse }
	OR = {
		is_ruler = yes
		AND = {
			is_female = yes
			$COURT_OWNER$.faith = { NOT = { has_doctrine_parameter = male_dominated_council } }
		}
		AND = {
			is_male = yes
			$COURT_OWNER$.faith = { NOT = { has_doctrine_parameter = female_dominated_council } }
		}
		AND = {
			has_trait = shieldmaiden
			$COURT_OWNER$.culture = { has_cultural_parameter = has_access_to_shieldmaidens }
		}
	}
}

BMU_can_be_spymaster_of = {
	NOT = { has_council_position = councillor_spouse }
	exists = $COURT_OWNER$ #so we can have the argument but get no errors
}

BMU_check_common_pressed_claim = {
	$STAKEHOLDER_1$ = { save_temporary_scope_as = stakeholder_1 }
	$STAKEHOLDER_2$ = { save_temporary_scope_as = stakeholder_2 }
	save_temporary_scope_value_as = {
		name = common_pressed_claim_number
		value = 0
	}
	scope:stakeholder_1 = {
		any_owned_story = {
			story_type = BMU_stakeholder_story
			save_temporary_scope_as = stakeholder_1_story
			scope:stakeholder_2 = {
				any_owned_story = {
					trigger_if = {
						limit = {
							story_type = BMU_stakeholder_story
							has_variable = status
							var:pressed_claim_story = scope:stakeholder_1_story.var:pressed_claim_story
							OR = {
								scope:stakeholder_1_story.var:status = flag:contender
								var:status = flag:contender
							}
						}
						var:pressed_claim_story = { add_to_temporary_list = common_pressed_claims }
						save_temporary_scope_as = stakeholder_2_story
						save_temporary_scope_value_as = {
							name = common_pressed_claim_number
							value = {
								add = scope:common_pressed_claim_number
								add = 1
							}
						}
					}
					count = all
				}
			}
		}
		trigger_else = { always = no }
	}
}


BMU_have_common_pressed_claim = {
	$STAKEHOLDER_1$ = { save_temporary_scope_as = stakeholder_1 }
	$STAKEHOLDER_2$ = { save_temporary_scope_as = stakeholder_2 }
	save_temporary_scope_value_as = {
		name = common_pressed_claim_number
		value = 0
	}
	scope:stakeholder_1 = {
		any_owned_story = {
			story_type = BMU_stakeholder_story
			trigger_if = {
				limit = {
					has_variable = status
					NOT = { var:status = flag:dropout }
				}
				save_temporary_scope_as = stakeholder_1_story
				scope:stakeholder_2 = {
					any_owned_story = {
						trigger_if = {
							limit = {
								story_type = BMU_stakeholder_story
								has_variable = status
								NOT = { var:status = flag:dropout }
								var:pressed_claim_story = scope:stakeholder_1_story.var:pressed_claim_story
								OR = {
									scope:stakeholder_1_story.var:status = flag:contender
									var:status = flag:contender
								}
							}
							var:pressed_claim_story = { add_to_temporary_list = common_pressed_claims }
							save_temporary_scope_as = stakeholder_2_story
							save_temporary_scope_value_as = {
								name = common_pressed_claim_number
								value = {
									add = scope:common_pressed_claim_number
									add = 1
								}
							}
						}
						count = all
					}
				}
			}
			trigger_else = { always = no }
		}
	}
	trigger_if = {
		limit = { scope:common_pressed_claim_number = 1 }
		custom_tooltip = {
			text = have_common_pressed_claim
			any_in_list = {
				list = common_pressed_claims
				save_temporary_scope_as = common_pressed_claim
			}
		}
	}
	trigger_else_if = {
		limit = {
			scope:common_pressed_claim_number > 0
			exists = scope:actor
			exists = scope:recipient
			scope:actor = { has_variable = current_pressed_claim }
		}
		custom_tooltip = {
			text = have_several_common_pressed_claim
			any_in_list = {
				list = common_pressed_claims
				this = scope:actor.var:current_pressed_claim
				save_temporary_scope_as = common_pressed_claim
			}
		}
	}
	trigger_else = {
		custom_tooltip = {
			text = have_no_common_pressed_claim
			always = no
		}
	}
}

BMU_is_claim_target_vassal_that_follows_pressed_claim = {
	$PRESSED_CLAIM$ = { save_temporary_scope_as = temp_pressed_claim }
	custom_description = {
		text = BMU_vassal_follows_pressed_claim
		subject = this
		object = scope:temp_pressed_claim.var:claimed_title
		is_landed = yes
		is_vassal_of = scope:temp_pressed_claim.story_owner
		primary_title = {
			OR = {
				target_is_de_jure_liege_or_above = scope:temp_pressed_claim.var:claimed_title
				AND = {
					scope:temp_pressed_claim.story_owner.primary_title = scope:temp_pressed_claim.var:claimed_title
					any_this_title_or_de_jure_above = {
						exists = holder
						holder = scope:temp_pressed_claim.story_owner
						count = 0
					}
				}
			}
		}
	}
}

BMU_allowed_to_imprison_character_trigger = {
	$IMPRISONER$ = { save_temporary_scope_as = allowed_imprisoner }
	$PRISONER$ = { save_temporary_scope_as = allowed_prisoner }
	trigger_if = {
		limit = {
			BMU_have_common_pressed_claim = {
				STAKEHOLDER_1 = scope:allowed_imprisoner
				STAKEHOLDER_2 = scope:allowed_prisoner
			}
		}
		BMU_vassal_follows_pressed_claim = { PRESSED_CLAIM = scope:pressed_claim_temp }
	}
}

BMU_bargained_with_council_position = {
	trigger_if = {
		limit = {
			any_bargain = {
				var:bargain_type = flag:FF_ambition_get_council_position
				var:council_position = flag:$POSITION$
				exists = var:supporter.story_owner
				var:supporter.story_owner = { save_temporary_scope_as = supporter_temp }
			}
		}
		custom_description = {
			text = BMU_bargained_with_council_position_$POSITION$
			subject = this
			object = scope:supporter_temp
		}
	}
	trigger_else = { always = no }
}

BMU_wants_council_position = {
	custom_description = {
		text = BMU_ambition_get_council_position_$POSITION$
		subject = this
		BMU_ambition_get_council_position_$POSITION$ > 0
	}
}

BMU_has_enough_remaining_gambits = {
	custom_description = {
		text = BMU_has_enough_remaining_gambits
		subject = scope:actor
		any_contender_story = {
			var:pressed_claim_story = scope:pressed_claim
			BMU_gambit_remaining >= BMU_supporter_gambit_cost
		}
	}
}

BMU_bargain_council_position_setup_trigger_global = {
	trigger_if = { limit = { scope:councillor_chancellor = yes } BMU_bargain_council_position_setup_trigger = { COUNCILLOR = councillor_chancellor SKILL = diplomacy }}
	trigger_else_if = { limit = { scope:councillor_steward = yes } BMU_bargain_council_position_setup_trigger = { COUNCILLOR = councillor_steward SKILL = stewardship }}
	trigger_else_if = { limit = { scope:councillor_marshal = yes } BMU_bargain_council_position_setup_trigger = { COUNCILLOR = councillor_marshal SKILL = martial }}
	trigger_else_if = { limit = { scope:councillor_spymaster = yes } BMU_bargain_council_position_setup_trigger = { COUNCILLOR = councillor_spymaster SKILL = intrigue }}
	trigger_else = { always = no }
}

BMU_bargain_council_position_setup_trigger = {
	save_temporary_scope_as = score_contender
	save_temporary_scope_value_as = { name = supporter_skill value = scope:supporter_char.$SKILL$ }
	trigger_if = {
		limit = { exists = cp:$COUNCILLOR$ }
		cp:$COUNCILLOR$ = {
			save_temporary_scope_as = current_councillor
			save_temporary_scope_value_as = { name = current_councillor_skill value = scope:current_councillor.$SKILL$ }
			trigger_if = {
				limit = {
					any_owned_story = {
						story_type = BMU_supporter_story
						var:pressed_claim_story = scope:pressed_claim
						var:contender.story_owner = scope:contender_char
					}
				}
				BMU_contender_score < BMU_ambition_get_council_position_$COUNCILLOR$
				save_temporary_scope_value_as = { name = dropout_councillor value = yes }
			}
			trigger_else = { always = no }
		}
	}
	trigger_else = { always = no }
}

BMU_dropout_councillor = {
	exists = cp:$COUNCILLOR$
	cp:$COUNCILLOR$ = {
		save_temporary_scope_as = dropout_councillor
		trigger_if = { limit = { has_council_position = councillor_chancellor } save_temporary_scope_value_as = { name = councillor_skill value = diplomacy }}
		trigger_else_if = { limit = { has_council_position = councillor_steward } save_temporary_scope_value_as = { name = councillor_skill value = stewardship }}
		trigger_else_if = { limit = { has_council_position = councillor_marshal } save_temporary_scope_value_as = { name = councillor_skill value = martial }}
		trigger_else_if = { limit = { has_council_position = councillor_spymaster } save_temporary_scope_value_as = { name = councillor_skill value = intrigue }}
		trigger_else = { always = no }
		any_owned_story = {
			story_type = BMU_supporter_story
			var:pressed_claim_story = scope:pressed_claim
			var:contender.story_owner = scope:contender_char
		}
		BMU_contender_score < BMU_ambition_get_council_position_$COUNCILLOR$
	}
}