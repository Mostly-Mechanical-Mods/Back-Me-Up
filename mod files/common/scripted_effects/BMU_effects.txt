BMU_pressed_claim_update_top_contender = {
	$PRESSED_CLAIM$ = { save_scope_as = temp_pressed_claim }
	scope:temp_pressed_claim = {
		every_in_list = {
			variable = contenders
			limit = { var:status = flag:contender }
			BMU_update_confidence = yes
		}
		ordered_in_list = {
			variable = contenders
			limit = {
				var:status = flag:contender
				NOT = { story_owner = scope:temp_pressed_claim.var:claim_target }
			}
			order_by = var:confidence_score
			scope:temp_pressed_claim = {
				set_variable = {
					name = top_contender
					value = prev.story_owner
				}
			}
		}
	}
}

BMU_execute_bargain = {
	$CONTENDER$ = { save_scope_as = contender_temp }
	save_scope_as = bargain_temp
	var:stakeholder_story = { save_scope_as = supporter_temp }
	switch = {
		trigger = var:ambition
		flag:FF_ambition_get_council_position = {
			switch = {
				trigger = var:council_position
				flag:chancellor = {
					scope:contender_temp.story_owner = {
						assign_councillor_type = {
							type = councillor_chancellor
							target = scope:supporter_temp.story_owner
						}
					}
				}
				flag:steward = {
					scope:contender_temp.story_owner = {
						assign_councillor_type = {
							type = councillor_steward
							target = scope:supporter_temp.story_owner
						}
					}
				}
				flag:marshal = {
					scope:contender_temp.story_owner = {
						assign_councillor_type = {
							type = councillor_marshal
							target = scope:supporter_temp.story_owner
						}
					}
				}
				flag:spymaster = {
					scope:contender_temp.story_owner = {
						assign_councillor_type = {
							type = councillor_spymaster
							target = scope:supporter_temp.story_owner
						}
					}
				}
			}
		}
	}
}

BMU_transfer_claimed_press = {
	$PRESSED_CLAIM$ = { save_scope_as = pressed_claim }
	$CLAIMED_TITLE$ = { save_scope_as = claimed_title }
	$OLD_CLAIM_TARGET$ = { save_scope_as = old_claim_target }
	$NEW_CLAIM_TARGET$ = { save_scope_as = new_claim_target }

	if = {
		limit = { debug_only = yes }
		debug_log = "BMU_transfer_claimed_press"
		scope:pressed_claim = { debug_log_scopes = no }
		scope:claimed_title = { debug_log_scopes = no }
		scope:old_claim_target = { debug_log_scopes = no }
		scope:new_claim_target = { debug_log_scopes = no }
	}

	scope:old_claim_target = {
		random_pressed_claim = {
			limit = { this = scope:pressed_claim }
			save_scope_as = old_claim_target_stakeholder_story
		}
	}
	scope:new_claim_target = {
		random_contender_story = {
			limit = { var:pressed_claim_story = scope:pressed_claim }
			save_scope_as = new_claim_target_stakeholder_story
		}
	}
	
	if = {
		limit = { exists = scope:new_claim_target_stakeholder_story }
		scope:new_claim_target_stakeholder_story = {
			set_variable = {
				name = status
				value = flag:contender
			}
			set_variable = {
				name = contender
				value = scope:new_claim_target_stakeholder_story
			}
			# every_in_list = {
			# 	variable = BMU_stakeholder_ambitions
			# 	if = {
			# 		limit = { has_variable = bargained_with }
			# 		var:bargained_with = {
			# 			remove_list_variable = {
			# 				name = bargains
			# 				target = scope:new_claim_target_stakeholder_story
			# 			}
			# 		}
			# 	}
			# 	end_story = yes
			# }
		}
	}
	else = {
		scope:old_claim_target_stakeholder_story = {
			make_story_owner = scope:new_claim_target
			set_variable = {
				name = stakeholder
				value = scope:new_claim_target
			}
		}
	}
	scope:pressed_claim = {
		set_variable = {
			name = claim_target
			value = scope:new_claim_target
		}
		make_story_owner = scope:new_claim_target
		every_in_list = {
			variable = claimants
			limit = {
				NOR = {
					has_claim_on = scope:claimed_title
					any_heir_title = { this = scope:claimed_title }
				}
			}
			prev = {
				remove_list_variable = {
					name = claimants
					target = prev
				}
			}
		}
	}
	scope:new_claim_target = {
		every_heir = {
			scope:pressed_claim = {
				add_to_variable_list = {
					name = claimants
					target = prev
				}
			}
		}
	}
}

BMU_dropout_supporters_of = {
	$PRESSED_CLAIM$ = { save_temporary_scope_as = pressed_claim_temp }
	$CONTENDER$ = { save_temporary_scope_as = contender_temp }
	scope:pressed_claim_temp = {
		every_in_list = {
			variable = supporters
			limit = { var:contender.story_owner = scope:contender_temp }
			end_story = yes
		}
	}
}



# CLEAN

BMU_create_bargain_get_council_position = {
	$PRESSED_CLAIM$ = { save_temporary_scope_as = pressed_claim_temp }
	$CONTENDER$ = {
		random_contender_story = {
			limit = { var:pressed_claim_story = scope:pressed_claim_temp}
			save_scope_as = contender_temp
		}
	}
	$SUPPORTER$ = {
		random_supporter_story = {
			limit = { var:pressed_claim_story = scope:pressed_claim_temp}
			save_scope_as = supporter_temp
		}
		if = {
			limit = { NOT = { exists = scope:supporter_temp }}
			random_stakeholder_story = {
				limit = { var:pressed_claim_story = scope:pressed_claim_temp}
				save_scope_as = supporter_temp
			}
		}
	}
	scope:contender_temp.story_owner = {
		create_story = {
			type = BMU_bargain_story
			save_scope_as = bargain
		}
		if = {
			limit = { exists = scope:bargain }
			scope:bargain = {
				set_variable = {
					name = pressed_claim
					value = scope:pressed_claim_temp
				}
				set_variable = {
					name = contender
					value = scope:contender_temp
				}
				set_variable = {
					name = supporter
					value = scope:supporter_temp
				}
				set_variable = {
					name = bargain_type
					value = flag:FF_ambition_get_council_position
				}
				set_variable = {
					name = support_score
					value = scope:supporter_temp.story_owner.BMU_ambition_get_council_position
				}
				if = { limit = { scope:councillor_chancellor = yes } set_variable = { name = council_position value = flag:councillor_chancellor }}
				else_if = { limit = { scope:councillor_steward = yes } set_variable = { name = council_position value = flag:councillor_steward }}
				else_if = { limit = { scope:councillor_marshal = yes } set_variable = { name = council_position value = flag:councillor_marshal }}
				else_if = { limit = { scope:councillor_spymaster = yes } set_variable = { name = council_position value = flag:councillor_spymaster }}
			}
			scope:contender_temp = {
				add_to_variable_list = {
					name = bargains
					target = scope:bargain
				}
			}
			scope:supporter_temp = {
				set_variable = {
					name = bargain
					value = scope:bargain
				}
			}
		}
	}
	clear_saved_scope = pressed_claim_temp
	clear_saved_scope = contender_temp
	clear_saved_scope = supporter_temp
}

BMU_accept_bargain = {
	# Remove previous Contender + send toast
	if = {
		limit = { scope:supporter = { has_variable = contender }}
		custom_description = {
			text = BMU_stop_supporting_contender
			subject = scope:supporter.story_owner
			object = scope:supporter.var:contender.story_owner
			scope:supporter.var:contender = {
				remove_list_variable = {
					name = supporters
					target = scope:supporter
				}
				story_owner = {
					every_owned_story = {
						limit = {
							story_type = BMU_bargain_story
							var:pressed_claim = scope:pressed_claim
							var:supporter = scope:supporter
						}
						set_variable = {
							name = status
							value = flag:broken
						}
						end_story = yes
					}
					send_interface_toast = {
						title = BMU_SUPPORTER_LOST
						left_icon = scope:supporter # optional, character, artifact, or title
					}
				}
			}
		}
	}
	# Set new Contender + toast (except if bargain struck, toast already handled)
	
	scope:supporter.story_owner = {
		custom_description = {
			text = BMU_start_supporting_contender
			subject = scope:supporter.story_owner
			object = scope:contender.story_owner
			scope:supporter = {
				set_variable = {
					name = status
					value = flag:supporter
				}
				set_variable = {
					name = contender
					value = scope:contender
				}
			}
			scope:contender = {
				add_to_variable_list = {
					name = supporters
					target = scope:supporter
				}
				story_owner = {
					send_interface_toast = {
						title = BMU_SUPPORTER_GAIN
						left_icon = scope:supporter.story_owner # optional, character, artifact, or title
					}
				}
			}
		}
	}
}