BMU_create_claim_press = {
	if = {
		limit = { debug_only = yes }
		debug_log = "BMU_create_claim_press START"
		$TARGET$ = { debug_log = "claim_target [THIS.Char.GetNameNoTooltip]" }
		$TARGET_TITLE$ = { debug_log = "claimed_title [THIS.Title.GetNameNoTooltip]" }
		$CONTENDER$ = { debug_log = "contender [THIS.Char.GetNameNoTooltip]" }
		$UNWILLING_CONTENDER$ = { debug_log = "unwilling_contender [THIS.Char.GetNameNoTooltip]" }
	}
	
	$TARGET$ = { save_scope_as = claim_target }
	$TARGET_TITLE$ = { save_scope_as = claimed_title }
	$CONTENDER$ = { save_scope_as = contender }
	$UNWILLING_CONTENDER$ = { save_scope_as = unwilling_contender }


	scope:claim_target = {
		create_story = {
			type = BMU_pressed_claim_story
			save_scope_as = pressed_claim
		}
	}

	if = {
		limit = {
			exists = scope:pressed_claim
		}
		add_to_global_variable_list = {
			name = BMU_claim_stories
			target = scope:pressed_claim
		}
	
		scope:pressed_claim = {
			debug_log = "story"
			debug_log_scopes = no
			set_variable = contention_phase
			set_variable = {
				name = pressed_claim_phase
				value = flag:contention_phase
			}
			set_variable = { name = claimed_title value = scope:claimed_title }
			set_variable = { name = claim_target value = scope:claim_target }
	
			story_owner = {
				add_to_variable_list = {
					name = claimed_titles
					target = scope:pressed_claim
				}
				add_to_list = claimants
			}
			var:claimed_title = {
				every_claimant = {
					explicit = all
					add_to_list = claimants
				}
			}
			# save_scope_value_as = {
			# 	name = claimant_index
			# 	value = 0
			# }
			if = {
				limit = { debug_only = yes }
				debug_log = "orderded_in_list claimants START"
			}
			ordered_in_list = {
				list = claimants
				max = 99
				check_range_bounds = no
				order_by = {
					value = 0
					if = {
						limit = { has_title = scope:claimed_title }
						add = 10000
					}
					if = {
						limit = { has_strong_claim_on = scope:claimed_title }
						add = 1000
					}
					else_if = {
						limit = { has_weak_claim_on = scope:claimed_title }
						add = 900
					}
					else = {
						add = 800
					}
					add = highest_held_title_tier
				}
				
				if = {
					limit = { debug_only = yes }
					debug_log_scopes = no
				}
				prev = {
					add_to_variable_list = {
						name = claimants
						target = prev
					}
				}
				create_story = {
					type = BMU_stakeholder_story
					save_scope_as = stakeholder_story
				}
				scope:stakeholder_story = {
					set_variable = {
						name = pressed_claim_story
						value = scope:pressed_claim
					}
					set_variable = claimant
					set_variable = {
						name = stakeholder
						value = story_owner
					}
					# set_variable = {
					# 	name = claimant_index
					# 	value = scope:claimant_index
					# }
					# save_scope_value_as = {
					# 	name = claimant_index
					# 	value = {
					# 		add = scope:claimant_index
					# 		add = 1
					# 	}
					# }
				}
				scope:pressed_claim = {
					add_to_variable_list = {
						name = BMU_pressed_claim_stakeholders
						target = scope:stakeholder_story
					}
				}
				if = {
					limit = {
						scope:contender = this
						scope:contender = scope:unwilling_contender
					}
					BMU_pressed_claim_supporter = {
						PRESSED_CLAIM = scope:pressed_claim
						CONTENDER = scope:contender
					}
				}
				trigger_event = BMU_pressed_claim.0010
	
				clear_saved_scope = stakeholder_story
			}
	
			if = {
				limit = { debug_only = yes }
				debug_log = "orderded_in_list claimants END"
			}
	
			scope:claim_target = {
				every_targeting_faction = {
					limit = {
						faction_is_type = claimant_faction
						special_title = scope:claimed_title
					}
					every_faction_member = {
						limit = {
							NOT = { this = prev.special_character }
							any_owned_story = {
								story_type = BMU_stakeholder_story
								var:pressed_claim_story = scope:pressed_claim
								count = 0
							}
						}
						BMU_create_pressed_claim_stakeholder_story = { PRESSED_CLAIM = scope:pressed_claim }
						prev.special_character = {
							random_owned_story = {
								limit = {
									story_type = BMU_stakeholder_story
									var:pressed_claim_story = scope:pressed_claim
								}
								scope:stakeholder_story = {
									set_variable = {
										name = faction_claimant
										value = prev
									}
								}
							}
						}
						BMU_pressed_claim_supporter = {
							PRESSED_CLAIM = scope:pressed_claim
							CONTENDER = prev.special_character
						}
					}
				}
			}
		}
	}
	if = {
		limit = { debug_only = yes }
		debug_log = "BMU_create_claim_press END"
	}
}

BMU_pressed_claim_supporter = {
	if = {
		limit = { debug_only = yes }
		debug_log = "BMU_pressed_claim_supporter START"
		debug_log_scopes = no
		$PRESSED_CLAIM$ = { debug_log_scopes = no }
		$PRESSED_CLAIM$.var:claimed_title = { debug_log = "claimed_title [THIS.Title.GetNameNoTooltip]" }
		$PRESSED_CLAIM$.var:claim_target = { debug_log = "claim_target [THIS.Char.GetNameNoTooltip]" }
		$CONTENDER$ = { debug_log = "contender [THIS.Char.GetNameNoTooltip]" }
	}

	save_scope_as = supporter
	$PRESSED_CLAIM$ = { save_scope_as = pressed_claim }
	$PRESSED_CLAIM$.var:claimed_title = { save_scope_as = claimed_title }
	$PRESSED_CLAIM$.var:claim_target = { save_scope_as = claim_target }
	$CONTENDER$ = { save_scope_as = contender }
	
	random_owned_story = {
		limit = {
			story_type = BMU_stakeholder_story
			has_variable = pressed_claim_story
			var:pressed_claim_story = scope:pressed_claim
		}
		save_scope_as = stakeholder_story
	}
	if = {
		limit = { exists = scope:stakeholder_story }

		# Remove previous Contender + send toast
		if = {
			limit = { scope:stakeholder_story = { has_variable = contender }}
			custom_description = {
				text = BMU_stop_supporting_contender
				subject = scope:supporter
				object = scope:stakeholder_story.var:contender.story_owner
				scope:stakeholder_story.var:contender = {
					remove_list_variable = {
						name = supporters
						target = scope:stakeholder_story
					}
					every_in_list = {
						variable = BMU_bargains
						limit = { var:stakeholder_story.story_owner = scope:supporter }
						remove_variable = bargained
						prev = {
							remove_list_variable = {
								name = BMU_bargains
								target = prev
							}
						}
					}
					story_owner = {
						send_interface_toast = {
							title = BMU_SUPPORTER_LOST
							left_icon = scope:supporter # optional, character, artifact, or title
						}
					}
				}
			}
		}
		# Set new Contender + toast (except if bargain struck, toast already handled)
		if = {
			limit = { NOT = { scope:contender = scope:supporter }}
			scope:stakeholder_story = {
				set_variable = {
					name = status
					value = flag:supporter
				}
			}
			custom_description = {
				text = BMU_start_supporting_contender
				subject = this
				object = scope:contender
				scope:contender = {
					random_owned_story = {
						limit = {
							story_type = BMU_stakeholder_story
							var:pressed_claim_story = scope:pressed_claim
						}
						scope:stakeholder_story = {
							set_variable = {
								name = contender
								value = prev
							}
						}
						if = {
							limit = { NOT = { scope:contender = scope:supporter }}
							add_to_variable_list = {
								name = supporters
								target = scope:stakeholder_story
							}
						}
					}
					if = {
						limit = { NOT = { exists = scope:bargain }}
						send_interface_toast = {
							title = BMU_SUPPORTER_GAIN
							left_icon = scope:supporter # optional, character, artifact, or title
						}
					}
				}
			}
		}
		else = {
			scope:stakeholder_story = {
				set_variable = {
					name = status
					value = flag:contender
				}
				set_variable = {
					name = contender
					value = this
				}
			}
		}

	}
	scope:pressed_claim = {
		BMU_pressed_claim_update_top_contender = yes
	}

	if = {
		limit = { debug_only = yes }
		debug_log = "BMU_pressed_claim_supporter END"
	}
}

BMU_pressed_claim_stakeholder = {
	if = {
		limit = { debug_only = yes }
		debug_log = "BMU_pressed_claim_stakeholder START"
		debug_log = "stakeholder [THIS.Char.GetNameNoTooltip]"
		$PRESSED_CLAIM$ = { debug_log_scopes = no }
	}
	save_scope_as = stakeholder
	$PRESSED_CLAIM$ = { save_scope_as = pressed_claim }

	random_owned_story = {
		limit = {
			story_type = BMU_stakeholder_story
			var:pressed_claim_story = scope:pressed_claim
		}
		remove_variable = contender
		set_variable = {
			name = status
			value = flag:stakeholder
		}
	}
	scope:pressed_claim = {
		BMU_pressed_claim_update_top_contender = yes
	}
	if = {
		limit = { debug_only = yes }
		debug_log = "BMU_pressed_claim_stakeholder END"
	}
}

BMU_pressed_claim_dropout = {
	if = {
		limit = { debug_only = yes }
		debug_log = "BMU_pressed_claim_dropout START"
		debug_log = "dropout [THIS.Char.GetNameNoTooltip]"
		$PRESSED_CLAIM$ = { debug_log_scopes = no }
	}
	save_scope_as = dropout
	$PRESSED_CLAIM$ = { save_scope_as = pressed_claim }

	random_owned_story = {
		limit = {
			story_type = BMU_stakeholder_story
			var:pressed_claim_story = scope:pressed_claim
		}
		remove_variable = top_candidate
		remove_variable = contender
		set_variable = {
			name = status
			value = flag:dropout
		}
	}
	scope:pressed_claim = {
		BMU_pressed_claim_update_top_contender = yes
	}
	if = {
		limit = { debug_only = yes }
		debug_log = "BMU_pressed_claim_dropout END"
	}
}

BMU_pressed_claim_update_top_contender = {
	ordered_in_list = {
		variable = BMU_pressed_claim_stakeholders
		limit = {
			has_variable = status
			var:status = flag:contender
			has_variable = stakeholder
			NOT = { story_owner = scope:claim_target }
		}
		order_by = {
			if = { limit = { story_owner = { save_temporary_scope_as = temp_contender }}}
			prev = {
				every_in_list = {
					variable = BMU_claim_stories
					limit = {
						has_variable = status
						OR = {
							var:status = flag:contender
							var:status = flag:supporter
						}
						has_variable = contender
						var:contender = scope:temp_contender
					}
					add = max_military_strength
				}
			}
		}
		prev = {
			set_variable = {
				name = top_contender
				value = prev.story_owner
			}
		}
	}
}

BMU_create_pressed_claim_stakeholder_story = {
	if = {
		limit = { debug_only = yes }
		debug_log = "BMU_create_pressed_claim_stakeholder_story START"
		debug_log = "stakeholder [THIS.Char.GetNameNoTooltip]"
		$PRESSED_CLAIM$ = { debug_log_scopes = no }
	}
	
	save_scope_as = stakeholder
	$PRESSED_CLAIM$ = { save_scope_as = pressed_claim }
	create_story = {
		type = BMU_stakeholder_story
		save_scope_as = stakeholder_story
	}
	scope:stakeholder_story = {
		set_variable = {
			name = pressed_claim_story
			value = scope:pressed_claim
		}
		set_variable = {
			name = story_owner
			value = story_owner
		}
	}
	scope:pressed_claim = {
		add_to_variable_list = {
			name = BMU_pressed_claim_stakeholders
			target = scope:stakeholder_story
		}
		ordered_in_list = {
			variable = BMU_pressed_claim_stakeholders
			limit = {
				has_variable = status
				var:status = flag:contender
				has_variable = stakeholder
				NOT = { story_owner = scope:pressed_claim.story_owner }
			}
			order_by = { story_owner = { scope:stakeholder = { add = BMU_contender_score }}}
			scope:stakeholder_story = {
				set_variable = {
					name = top_contender
					value = prev
				}
			}
		}
	}

	# Clean-up coveted_titles list
	every_in_list = {
		list = coveted_titles
		remove_from_list = coveted_titles
	}

	# Ambition Get Title
	debug_log = "coveted de_jure"
	every_held_title = {
		every_this_title_or_de_jure_above = {
			add_to_list = coveted_titles
			debug_log_scopes = no
		}
	}
	debug_log = "coveted claim"
	every_claim = {
		limit = { NOT = { holder = scope:stakeholder }}
		add_to_list = coveted_titles
	}
	debug_log = "coveted neighbour"
	every_held_title = {
		limit = { tier > tier_barony }
		if = {
			limit = { tier >= tier_duchy }
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_county
					NOT = { holder = scope:stakeholder }
				}
				add_to_list = coveted_titles
			}
		}
		else = {
			every_neighboring_county = {
				limit = { NOT = { holder = scope:stakeholder }}
				add_to_list = coveted_titles
			}
		}
	}
	debug_log = "coveted_titles"
	every_in_list = {
		list = coveted_titles
		limit = { save_temporary_scope_as = temp_coveted_title }
		save_scope_as = coveted_title
		debug_log_scopes = no
		if = {
			limit = {
				exists = holder
				NOT = { holder = scope:stakeholder }
				holder = {
					any_owned_story = {
						story_type = BMU_stakeholder_story
						var:pressed_claim_story = scope:pressed_claim
						has_variable = status
						var:status = flag:contender
						trigger_if = {
							limit = { prev = var:pressed_claim_story.var:claim_target }
							NOR = {
								scope:coveted_title = var:pressed_claim_story.var:claimed_title
								scope:coveted_title = var:pressed_claim_story.var:claimed_title.title_capital_county
							}
						}
					}
				}
			}
			holder = {
				save_scope_as = coveted_title_holder
				debug_log_scopes = no
			}
		}
		else_if = {
			limit = {
				tier >= tier_duchy
				is_title_created = no
			}
			scope:pressed_claim = {
				random_in_list = {
					variable = BMU_pressed_claim_stakeholders
					limit = {
						has_variable = status
						var:status = flag:contender
						story_owner = {
							any_alert_creatable_title = {
								this = scope:coveted_title
							}
						}
					}
					story_owner = {
						save_scope_as = coveted_title_holder
						debug_log_scopes = no
					}
				}
			}
		}
		if = {
			limit = { exists = scope:coveted_title_holder }
			scope:stakeholder = {
				create_story = {
					type = BMU_ambition_story
					save_scope_as = BMU_stakeholder_ambition
				}
				scope:stakeholder_story = {
					add_to_variable_list = {
						name = BMU_stakeholder_ambitions
						target = scope:BMU_stakeholder_ambition
					}
				}
				scope:BMU_stakeholder_ambition = {
					set_variable = {
						name = pressed_claim_story
						value = scope:pressed_claim
					}
					set_variable = {
						name = stakeholder_story
						value = scope:stakeholder_story
					}
					set_variable = {
						name = story_owner
						value = story_owner
					}
					set_variable = {
						name = ambition
						value = flag:FF_ambition_get_title
					}
					set_variable = {
						name = coveted_title
						value = scope:coveted_title
					}
					set_variable = {
						name = coveted_title_holder
						value = scope:coveted_title_holder
					}
					set_variable = {
						name = ambition_score
						value = { scope:stakeholder = { add = FF_ambition_get_title }}
					}
				}
			}
			clear_saved_scope = coveted_title_holder
		}
	}

	debug_log = "get_title_for_child"
	# Ambition Get Title for child
	every_child = {
		save_scope_as = child
		scope:stakeholder = {
			save_scope_value_as = {
				name = FF_ambition_get_child_title
				value = FF_ambition_get_child_title
			}
			if = {
				limit = {
					trigger_if = {
						limit = { is_ai = yes }
						scope:FF_ambition_get_child_title > 0
					}
				}
				create_story = {
					type = BMU_ambition_story
					save_scope_as = BMU_stakeholder_ambition
				}
				scope:stakeholder_story = {
					add_to_variable_list = {
						name = BMU_stakeholder_ambitions
						target = scope:BMU_stakeholder_ambition
					}
				}
				scope:BMU_stakeholder_ambition = {
					set_variable = {
						name = pressed_claim_story
						value = scope:pressed_claim
					}
					set_variable = {
						name = stakeholder_story
						value = scope:stakeholder_story
					}
					set_variable = {
						name = story_owner
						value = story_owner
					}
					set_variable = {
						name = ambition
						value = flag:FF_ambition_get_child_title
					}
					set_variable = {
						name = child
						value = scope:child
					}
					set_variable = {
						name = ambition_score
						value = scope:FF_ambition_get_child_title
					}
				}
			}
		}
	}
	debug_log = "get_gold"
	# Ambition Get Gold
	scope:stakeholder = {
		save_scope_value_as = {
			name = FF_ambition_get_gold
			value = FF_ambition_get_gold
		}
		if = {
			limit = {
				trigger_if = {
					limit = { is_ai = yes }
					scope:FF_ambition_get_gold > 0
				}
			}
			create_story = {
				type = BMU_ambition_story
				save_scope_as = BMU_stakeholder_ambition
			}
			scope:stakeholder_story = {
				add_to_variable_list = {
					name = BMU_stakeholder_ambitions
					target = scope:BMU_stakeholder_ambition
				}
			}
			scope:BMU_stakeholder_ambition = {
				set_variable = {
					name = pressed_claim_story
					value = scope:pressed_claim
				}
				set_variable = {
					name = stakeholder_story
					value = scope:stakeholder_story
				}
				set_variable = {
					name = story_owner
					value = story_owner
				}
				set_variable = {
					name = ambition
					value = flag:FF_ambition_get_gold
				}
				set_variable = {
					name = ambition_score
					value = scope:FF_ambition_get_gold
				}
			}
		}
	}
	debug_log = "screw_rival"
	# Ambition Screw Rival
	# scope:stakeholder = {
	# 	save_scope_value_as = {
	# 		name = FF_ambition_screw_rival
	# 		value = FF_ambition_screw_rival
	# 	}
	# 	if = {
	# 		limit = { scope:FF_ambition_screw_rival > 0 }
	# 		every_relation = {
	# 			type = rival
	# 			limit = {
	# 				any_owned_story = {
	# 					story_type = BMU_stakeholder_story
	# 					var:pressed_claim_story = scope:pressed_claim
	# 					has_variable = status
	# 					var:status = flag:contender
	# 				}
	# 			}
	# 			save_scope_as = rival
	# 			scope:stakeholder = {
	# 				create_story = {
	# 					type = BMU_ambition_story
	# 					save_scope_as = BMU_stakeholder_ambition
	# 				}
	# 				scope:stakeholder_story = {
	# 					add_to_variable_list = {
	# 						name = BMU_stakeholder_ambitions
	# 						target = scope:BMU_stakeholder_ambition
	# 					}
	# 				}
	# 				scope:BMU_stakeholder_ambition = {
	# 					set_variable = {
	# 						name = pressed_claim_story
	# 						value = scope:pressed_claim
	# 					}
	# 					set_variable = {
	# 						name = stakeholder_story
	# 						value = scope:stakeholder_story
	# 					}
	# 					set_variable = {
	# 						name = story_owner
	# 						value = story_owner
	# 					}
	# 					set_variable = {
	# 						name = ambition
	# 						value = flag:FF_ambition_screw_rival
	# 					}
	# 					set_variable = {
	# 						name = rival
	# 						value = scope:rival
	# 					}
	# 					set_variable = {
	# 						name = ambition_score
	# 						value = scope:FF_ambition_screw_rival
	# 					}
	# 				}
	# 			}
	# 		}
	# 	}
	# }
	debug_log = "help_friend"
	# Ambition Help Friend
	# scope:stakeholder = {
	# 	save_scope_value_as = {
	# 		name = FF_ambition_help_friend
	# 		value = FF_ambition_help_friend
	# 	}
	# 	if = {
	# 		limit = { scope:FF_ambition_help_friend > 0 }
	# 		every_relation = {
	# 			type = friend
	# 			limit = {
	# 				any_owned_story = {
	# 					story_type = BMU_stakeholder_story
	# 					var:pressed_claim_story = scope:pressed_claim
	# 					has_variable = status
	# 					var:status = flag:contender
	# 				}
	# 			}
	# 			save_scope_as = friend
	# 			scope:stakeholder = {
	# 				create_story = {
	# 					type = BMU_ambition_story
	# 					save_scope_as = BMU_stakeholder_ambition
	# 				}
	# 				scope:stakeholder_story = {
	# 					add_to_variable_list = {
	# 						name = BMU_stakeholder_ambitions
	# 						target = scope:BMU_stakeholder_ambition
	# 					}
	# 				}
	# 				scope:BMU_stakeholder_ambition = {
	# 					set_variable = {
	# 						name = pressed_claim_story
	# 						value = scope:pressed_claim
	# 					}
	# 					set_variable = {
	# 						name = stakeholder_story
	# 						value = scope:stakeholder_story
	# 					}
	# 					set_variable = {
	# 						name = story_owner
	# 						value = story_owner
	# 					}
	# 					set_variable = {
	# 						name = ambition
	# 						value = flag:FF_ambition_help_friend
	# 					}
	# 					set_variable = {
	# 						name = rival
	# 						value = scope:friend
	# 					}
	# 					set_variable = {
	# 						name = ambition_score
	# 						value = scope:FF_ambition_help_friend
	# 					}
	# 				}
	# 			}
	# 		}
	# 	}
	# }
	debug_log = "get_council_position"
	#Ambition Get Council Position
	scope:stakeholder = {
		if = {
			limit = {
				is_independent_ruler = no
				is_adult = yes
				trigger_if = {
					limit = {
						is_ai = yes
						FF_ambition_get_council_position > 0
					}
				}
			}
			every_in_global_list = {
				variable = FF_council_position_datamodel
				save_scope_as = council_position
				debug_log = "BMU council position"
				debug_log_scopes = no
				scope:council_position = { debug_log_scopes = no }
				scope:stakeholder = {
					save_scope_value_as = {
						name = FF_ambition_get_council_position
						value = FF_ambition_get_council_position
					}
				}
				scope:stakeholder = {
					create_story = {
						type = BMU_ambition_story
						save_scope_as = BMU_stakeholder_ambition
					}
					scope:stakeholder_story = {
						add_to_variable_list = {
							name = BMU_stakeholder_ambitions
							target = scope:BMU_stakeholder_ambition
						}
					}
					scope:BMU_stakeholder_ambition = {
						set_variable = {
							name = pressed_claim_story
							value = scope:pressed_claim
						}
						set_variable = {
							name = stakeholder_story
							value = scope:stakeholder_story
						}
						set_variable = {
							name = story_owner
							value = story_owner
						}
						set_variable = {
							name = ambition
							value = flag:FF_ambition_get_council_position
						}
						set_variable = {
							name = council_position
							value = scope:council_position
						}
						set_variable = {
							name = ambition_score
							value = scope:FF_ambition_get_council_position
						}
					}
				}
			}
		}
	}
	if = {
		limit = { debug_only = yes }
		debug_log = "BMU_create_pressed_claim_stakeholder_story END"
	}
}

BMU_send_bargain = {
	$CONTENDER$ = { save_scope_as = contender }
	var:stakeholder_story = { save_scope_as = supporter }
	save_scope_as = bargain
	set_variable = pending
	if = {
		limit = { debug_only = yes }
		debug_log_scopes = no
		scope:supporter.story_owner = { debug_log_scopes = no }
		var:ambition = { debug_log_scopes = no }
	}
	scope:supporter.var:bargainer = {
		trigger_event = BMU_pressed_claim_bargaining.0001
	}
}

BMU_execute_bargain_tooltip = {
	save_scope_as = bargain_temp
	show_as_tooltip = {
		$CONTENDER$ = { save_scope_as = contender_temp }
		if = {
			limit = { var:stakeholder_story = { has_variable = contender }}
			custom_tooltip = BMU_BREAK_SUPPORT_TOOLTIP
		}

		custom_tooltip = BMU_ACCEPT_BARGAIN_TOOLTIP
		add_to_list = tooltip
		every_in_list = {
			list = tooltip
			custom = BMU_AFTER_PRESSED_CLAIM	
			BMU_execute_bargain = { CONTENDER = scope:contender_temp }
		}
	}
}

BMU_execute_bargain = {
	$CONTENDER$ = { save_scope_as = contender_temp }
	save_scope_as = bargain_temp
	var:stakeholder_story = { save_scope_as = supporter_temp }
	switch = {
		trigger = var:ambition
		flag:FF_ambition_get_council_position = {
			switch = {
				trigger = var:council_position
				flag:chancellor = {
					scope:contender_temp.story_owner = {
						assign_councillor_type = {
							type = councillor_chancellor
							target = scope:supporter_temp.story_owner
						}
					}
				}
				flag:steward = {
					scope:contender_temp.story_owner = {
						assign_councillor_type = {
							type = councillor_steward
							target = scope:supporter_temp.story_owner
						}
					}
				}
				flag:marshal = {
					scope:contender_temp.story_owner = {
						assign_councillor_type = {
							type = councillor_marshal
							target = scope:supporter_temp.story_owner
						}
					}
				}
				flag:spymaster = {
					scope:contender_temp.story_owner = {
						assign_councillor_type = {
							type = councillor_spymaster
							target = scope:supporter_temp.story_owner
						}
					}
				}
			}
		}
	}
}

BMU_transfer_claimed_press = {
	$PRESSED_CLAIM$ = { save_scope_as = pressed_claim }
	$CLAIMED_TITLE$ = { save_scope_as = claimed_title }
	$OLD_CLAIM_TARGET$ = { save_scope_as = old_claim_target }
	$NEW_CLAIM_TARGET$ = { save_scope_as = new_claim_target }

	if = {
		limit = { debug_only = yes }
		debug_log = "BMU_transfer_claimed_press"
		scope:pressed_claim = { debug_log_scopes = no }
		scope:claimed_title = { debug_log_scopes = no }
		scope:old_claim_target = { debug_log_scopes = no }
		scope:new_claim_target = { debug_log_scopes = no }
	}

	scope:old_claim_target = {
		random_owned_story = {
			limit = {
				story_type = BMU_stakeholder_story
				var:pressed_claim_story = scope:pressed_claim
			}
			save_scope_as = old_claim_target_stakeholder_story
		}
	}
	scope:new_claim_target = {
		random_owned_story = {
			limit = {
				story_type = BMU_stakeholder_story
				var:pressed_claim_story = scope:pressed_claim
			}
			save_scope_as = new_claim_target_stakeholder_story
		}
	}
	
	if = {
		limit = { exists = scope:new_claim_target_stakeholder_story }
		scope:new_claim_target_stakeholder_story = {
			set_variable = {
				name = status
				value = flag:contender
			}
			set_variable = {
				name = contender
				value = scope:new_claim_target_stakeholder_story
			}
			every_in_list = {
				variable = BMU_stakeholder_ambitions
				if = {
					limit = { has_variable = bargained_with }
					var:bargained_with = {
						remove_list_variable = {
							name = BMU_bargains
							target = scope:new_claim_target_stakeholder_story
						}
					}
				}
				end_story = yes
			}
		}
	}
	else = {
		scope:old_claim_target_stakeholder_story = {
			make_story_owner = scope:new_claim_target
			set_variable = {
				name = stakeholder
				value = scope:new_claim_target
			}
		}
	}
	scope:pressed_claim = {
		set_variable = {
			name = claim_target
			value = scope:new_claim_target
		}
		make_story_owner = scope:new_claim_target
	}
}

BMU_dropout_supporters_of = {
	$PRESSED_CLAIM$ = { save_temporary_scope_as = pressed_claim_temp }
	$CONTENDER$ = { save_temporary_scope_as = contender_temp }
	scope:pressed_claim_temp = {
		every_in_list = {
			variable = BMU_pressed_claim_stakeholders
			limit = {
				var:status = flag:supporter
				var:contender.story_owner = scope:contender_temp
			}
			end_story = yes
		}
	}
}