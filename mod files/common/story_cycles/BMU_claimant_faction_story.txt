BMU_pressed_claim_story = {
	on_setup = {
		# handled in BMU_create_claim_press effect

		set_variable = {
			name = start_date
			value = current_date
		}
		set_variable = {
			name = phase
			value = flag:contention_phase
		}
	}
	
	on_end = {
		every_in_list = {
			variable = pressed_claim_gui
			remove_list_variable = {
				name = pressed_claim_gui
				target = prev
			}
		}
		var:claimed_title = {
			remove_variable = pressed_claim
		}
		every_in_list = {
			variable = stakeholders
			end_story = yes
		}
		every_in_list = {
			variable = contenders
			end_story = yes
		}
	}

	on_owner_death = {
		var:claimed_title = {
			ordered_title_heir = {
				save_scope_as = new_claim_target
			}
		}
		BMU_transfer_claimed_press = {
			PRESSED_CLAIM = this
			CLAIMED_TITLE = var:claimed_title
			OLD_CLAIM_TARGET = story_owner
			NEW_CLAIM_TARGET = scope:new_claim_target
		}
	}

	effect_group = {
		months = 1
		# days = 30
		first_valid = {
			triggered_effect = {
				trigger = { var:phase = flag:war_phase }
				effect = {
					save_scope_as = pressed_claim
				}
			}
			# War Phase
			triggered_effect = {
				trigger = { var:phase = flag:declaration_phase }
				effect = {
					save_scope_as = pressed_claim
					debug_log = "BMU_pressed_claim war_phase"
					debug_log_scopes = no
					set_variable = {
						name = phase
						value = flag:war_phase
					}
					var:claim_target = { save_scope_as = claim_target }
					var:claimed_title = {
						save_scope_as = claimed_title
						save_scope_as = old_title
					}
					every_in_list = {
						variable = contenders
						limit = {
							NOT = { story_owner = scope:claim_target }
							trigger_if = {
								limit = { story_owner = { is_landed = no }}
								story_owner = { save_temporary_scope_as = unlanded_contender }
								prev = {
									any_in_list = {
										variable = supporter
										var:contender.story_owner = scope:unlanded_contender
									}
								}
							}
						}
						story_owner = {
							debug_log_scopes = no
							if = {
								limit = { is_landed = no }
								add_character_flag = flavorization_contender
								create_dynamic_title = {
									tier = duchy
									name = CONTENDER_TITLE_NAME
								}
								create_title_and_vassal_change = {
									type = created
									save_scope_as = change
									add_claim_on_loss = no
								}
								scope:new_title = {
									set_capital_county = scope:claimed_title.title_capital_county
									set_landless_title = yes
									set_destroy_on_succession = no
									set_delete_on_destroy = yes
									set_no_automatic_claims = yes
									set_definitive_form = yes
									set_can_be_named_after_dynasty = no
									if = {
										limit = { exists = prev.court_owner }
										set_variable = {
											name = previous_court
											value = prev.court_owner
										}
									}
									change_title_holder = {
										holder = prev
										change = scope:change
									}
									set_variable = unlanded_contender
									generate_coa = pressed_claim
								}
								resolve_title_and_vassal_change = scope:change
							}
							start_war = {
								cb = BMU_pressed_claim_cb
								target = scope:claim_target
								claimant = this
								target_title = scope:claimed_title
							}
						}
					}
					every_in_list = {
						variable = supporter
						story_owner = { save_scope_as = supporter }
						var:contender.story_owner = {
							every_character_war = {
								limit = { using_cb = BMU_pressed_claim_cb }
								if = {
									limit = { is_attacker = prev }
									add_attacker = scope:supporter
								}
								else = {
									add_defender = scope:supporter
								}
							}
						}
					}
				}
			}
			# Declaration Phase
			triggered_effect = {
				trigger = { var:phase = flag:rallying_phase }
				effect = {
					save_scope_as = pressed_claim
					if = {
						limit = { var:rallying_phase >= 5 }
						set_variable = {
							name = phase
							value = flag:declaration_phase
						}
					}
					else = {
						debug_log = "BMU_pressed_claim declaration_phase"
						debug_log_scopes = no
						change_variable = {
							name = rallying_phase
							add = 1
						}
					}
				}
			}
			# # Bargaining Phase
			# triggered_effect = {
			# 	trigger = { var:phase = flag:rallying_phase }
			# 	effect = {
			# 		save_scope_as = pressed_claim
			# 		debug_log = "BMU_pressed_claim bargaining_phase"
			# 		debug_log_scopes = no
			# 		set_variable = {
			# 			name = phase
			# 			value = flag:bargaining_phase
			# 		}
			# 		set_variable = {
			# 			name = rallying_phase
			# 			value = 0
			# 		}
			# 	}
			# }
			# Rallying Phase
			triggered_effect = {
				trigger = { var:phase = flag:contention_phase }
				effect = {
					save_scope_as = pressed_claim
					debug_log = "BMU_pressed_claim rallying_phase"
					debug_log_scopes = no

					set_variable = {
						name = phase
						value = flag:rallying_phase
					}
					set_variable = {
						name = rallying_phase
						value = 0
					}

					every_in_list = {
						variable = contenders
						story_owner = { add_to_list = contenders }
					}

					every_in_list = {
						list = contenders
						every_ally = {
							add_to_list = stakeholders
						}
						every_close_family_member = {
							add_to_list = stakeholders
						}
						every_relation = {
							type = friend
							add_to_list = stakeholders
						}
						every_relation = {
							type = lover
							add_to_list = stakeholders
						}
						every_relation = {
							type = rival
							add_to_list = stakeholders
						}
						every_vassal = {
							add_to_list = stakeholders
						}
						liege = {
							add_to_list = stakeholders
						}
						if = {
							limit = { exists = dynasty }
							dynasty.dynast = { add_to_list = stakeholders }
							house.house_head = { add_to_list = stakeholders }
						}
					}
					every_in_list = {
						list = stakeholders
						limit = {
							highest_held_title_tier >= tier_county
							any_contender_story = {
								var:pressed_claim_story = scope:story
								count = 0
							}
						}
						create_story = {
							type = BMU_stakeholder_story
							save_scope_as = stakeholder_story
						}
						scope:stakeholder_story = {
							set_variable = {
								name = pressed_claim_story
								value = scope:story
							}
							set_variable = {
								name = stakeholder
								value = story_owner
							}
							BMU_calc_best_contenders = { PRESSED_CLAIM = scope:pressed_claim }
							scope:story = {
								add_to_variable_list = {
									name = stakeholders
									target = scope:stakeholder_story
								}
							}
						}
					}
					every_in_list = {
						list = contenders
						save_scope_as = contender
						every_relation = {
							type = rival
							limit = {
								any_contender_story = {
									var:pressed_claim_story = scope:story
									count = 0
								}
							}
							every_in_list = {
								list = contenders
								limit = { NOT = { this = scope:contender }}
								BMU_set_relation_stakeholder = {
									TARGET = prev
									FLAG = contender_rival
								}
							}
						}
					}
					story_owner = {
						every_vassal = {
							limit = {
								any_contender_story = {
									var:pressed_claim_story = scope:story
									count = 0
								}
								BMU_is_claim_target_vassal_that_follows_pressed_claim = { PRESSED_CLAIM = scope:story }
							}
							save_scope_as = future_vassal
							every_in_list = {
								list = contenders
								limit = { NOT = { this = scope:story.story_owner }}
								BMU_set_relation_stakeholder = {
									TARGET = scope:future_vassal
									FLAG = future_vassal
								}
							}
						}
					}
					set_variable = stakeholders_added
				}
			}
		}
	}

	effect_group = {
		weeks = 1
		triggered_effect = {
			effect = {
				every_in_list = {
					variable = contenders
					save_scope_as = contender
					set_variable = {
						name = max_military_strength
						value = {
							add = story_owner.max_military_strength
							scope:story = {
								every_in_list = {
									variable = supporters
									limit = { var:contender = scope:contender }
									add = story_owner.max_military_strength
								}
							}
						}
					}
				}
				ordered_in_list = {
					variable = contenders
					order_by = var:max_military_strength
					scope:story = {
						set_variable = {
							name = top_contender
							value = prev.story_owner
						}
					}
					save_scope_as = top_contender
				}
				every_in_list = {
					variable = contenders
					save_scope_as = contender
					set_variable = {
						name = confidence_score
						value = {
							add = var:max_military_strength
							divide = {
								scope:story = {
									ordered_in_list = {
										variable = contenders
										limit = { NOT = { this = scope:contender }}
										order_by = var:max_military_strength
										position = 0
										add = var:max_military_strength
									}
								}
							}
						}
					}
					if = {
						limit = { var:confidence_score >= 1.2 }
						set_variable = { name = confidence_flag value = flag:confidence_cocky }
					}
					else_if = {
						limit = { var:confidence_score >= 0.9 }
						set_variable = { name = confidence_flag value = flag:confidence_confident }
					}
					else_if = {
						limit = { var:confidence_score >= 0.75 }
						set_variable = { name = confidence_flag value = flag:confidence_concerned }
					}
					else = { set_variable = { name = confidence_flag value = flag:confidence_fearful }}
				}
			}
		}
	}

	# effect_group = {
	# 	days = 1
	# 	triggered_effect = {
	# 		effect = {
	# 			debug_log = "DEBUG DATE [GetCurrentDate]"
	# 		}
	# 	}
	# }
}

# BMU_stakeholder_story = {
# 	on_setup = {
# 		debug_log = "BMU_stakeholder_story"
# 		debug_log_scopes = no
# 		set_variable = {
# 			name = stakeholder
# 			value = story_owner
# 		}
# 		set_variable = {
# 			name = bargainer
# 			value = story_owner
# 		}

# 	}
# 	on_end = {
# 		story_owner = {
# 			remove_list_variable = {
# 				name = BMU_stakeholder_stories
# 				target = prev
# 			}
# 			every_owned_story = {
# 				limit = { story_type = BMU_ambition_story }
# 				end_story = yes
# 			}
# 		}
# 		var:pressed_claim_story = {
# 			remove_list_variable = {
# 				name = pressed_claim_gui
# 				target = prev
# 			}
# 		}
# 	}
# 	on_owner_death = {
# 		#TODO replace with event to primary_heir asking for course of action
# 		if = {
# 			limit = {
# 				OR = {
# 					var:status = flag:supporter
# 					var:status = flag:contender
# 				}
# 				var:pressed_claim_story.var:phase = flag:war_phase
# 				story_owner = { exists = primary_heir }
# 			}
# 			make_story_owner = story_owner.primary_heir
# 		}
# 		else = {
# 			#TODO send notifications to contender if supporter, to other contenders + own supporters if contender
# 			end_story = yes
# 		}
# 	}
# 	# effect_group = {
# 	# 	days = { 5 15 }
# 	# 	triggered_effect = {
# 	# 		trigger = {
# 	# 			var:pressed_claim_story.var:phase = flag:bargaining_phase
# 	# 			var:status = flag:contender
# 	# 			NOT = { story_owner = { has_variable = pending_bargain_proposal }}
# 	# 			story_owner = { is_ai = yes }
# 	# 		}
# 	# 		effect = {
# 	# 			if = {
# 	# 				limit = { debug_only = yes }
# 	# 				debug_log = "Bargain AI Contender"
# 	# 				story_owner = { debug_log_scopes = no }
# 	# 			}
# 	# 			save_scope_as = contender
# 	# 			# var:pressed_claim_story = {
# 	# 			# 	save_scope_as = pressed_claim
# 	# 			# 	random_in_list = {
# 	# 			# 		variable = BMU_pressed_claim_stakeholders
# 	# 			# 		limit = {
# 	# 			# 			BMU_can_bargain = { CONTENDER = scope:contender SUPPORTER = this }
# 	# 			# 			save_temporary_scope_value_as = {
# 	# 			# 				name = neg_contender_score
# 	# 			# 				value = { story_owner = { scope:contender.story_owner = { subtract = BMU_contender_score }}}
# 	# 			# 			}
# 	# 			# 			save_temporary_scope_as = supporter
# 	# 			# 			any_in_list = {
# 	# 			# 				variable = BMU_stakeholder_ambitions
# 	# 			# 				save_temporary_scope_as = bargain_temp
# 	# 			# 				BMU_bargain_can_be_struck = { CONTENDER = scope:contender SUPPORTER = scope:supporter }
# 	# 			# 				scope:supporter.story_owner = { scope:contender.story_owner = { scope:bargain_temp.var:ambition_score > scope:neg_contender_score }}
# 	# 			# 				scope:contender.story_owner = { FF_ambition_cost > 0 }
# 	# 			# 			}
# 	# 			# 		}
# 	# 			# 		weight = {
# 	# 			# 			base = 0
# 	# 			# 			modifier = {
# 	# 			# 				add = story_owner.max_military_strength
# 	# 			# 			}
# 	# 			# 			modifier = {
# 	# 			# 				var:status = flag:supporter
# 	# 			# 				var:contender = scope:contender
# 	# 			# 				factor = 0.5
# 	# 			# 			}
# 	# 			# 		}
# 	# 			# 		save_scope_as = supporter
# 	# 			# 		if = {
# 	# 			# 			limit = { debug_only = yes }
# 	# 			# 			debug_log = "random stakeholder"
# 	# 			# 			story_owner = { debug_log_scopes = no }
# 	# 			# 		}
# 	# 			# 		save_scope_value_as = {
# 	# 			# 			name = neg_contender_score
# 	# 			# 			value = { story_owner = { scope:contender.story_owner = { subtract = BMU_contender_score }}}
# 	# 			# 		}
# 	# 			# 		random_in_list = {
# 	# 			# 			variable = BMU_stakeholder_ambitions
# 	# 			# 			limit = {
# 	# 			# 				save_temporary_scope_as = bargain_temp
# 	# 			# 				BMU_bargain_can_be_struck = { CONTENDER = scope:contender SUPPORTER = scope:supporter }
# 	# 			# 				scope:supporter.story_owner = { scope:contender.story_owner = { scope:bargain_temp.var:ambition_score > scope:neg_contender_score }}
# 	# 			# 				scope:contender.story_owner = { FF_ambition_cost > 0 }
# 	# 			# 			}
# 	# 			# 			save_scope_as = bargain
# 	# 			# 			set_variable = pending
# 	# 			# 			if = {
# 	# 			# 				limit = { debug_only = yes }
# 	# 			# 				debug_log_scopes = no
# 	# 			# 				scope:supporter.story_owner = { debug_log_scopes = no }
# 	# 			# 				var:ambition = { debug_log_scopes = no }
# 	# 			# 			}
# 	# 			# 			BMU_send_bargain = { CONTENDER = scope:contender }
# 	# 			# 		}
# 	# 			# 	}
# 	# 			# }
# 	# 		}
# 	# 	}
# 	# }
# 	effect_group = {
# 		weeks = 1
# 		triggered_effect = {
# 			trigger = { var:status = flag:supporter }
# 			effect = {
# 				var:pressed_claim_story = {
# 					ordered_in_list = {
# 						variable = BMU_pressed_claim_stakeholders
# 						limit = {
# 							var:status = flag:contender
# 							NOT = { this = scope:story.var:contender }
# 						}
# 						order_by = {
# 							story_owner = {
# 								save_temporary_scope_as = score_contender
# 								scope:story.story_owner = { add = BMU_contender_score }}
# 							min = 0
# 						}
# 						scope:story = {
# 							set_variable = {
# 								name = top_contender
# 								value = prev
# 							}
# 						}
# 					}
# 				}
# 			}
# 		}
# 		triggered_effect = {
# 			trigger = { var:status = flag:contender }
# 			effect = {
# 				var:pressed_claim_story = { save_scope_as = pressed_claim }
# 				BMU_update_confidence = yes
# 			}
# 		}
# 	}
# }

BMU_contender_story = {
	on_setup = {
		if = {
			limit = { debug_only = yes }
			debug_log = "BMU_contender_story"
			debug_log_scopes = no
		}
		set_variable = {
			name = stakeholder
			value = story_owner
		}
		set_variable = {
			name = story_owner
			value = story_owner
		}
		set_variable = {
			name = bargainer
			value = story_owner
		}
		set_variable = {
			name = max_military_strength
			value = story_owner.max_military_strength
		}
		set_variable = {
			name = manoeuver_spent
			value = 0
		}
		# story_owner = {
		# 	every_close_family_member = { add_to_list = stakeholders }
		# 	every_ally = { add_to_list = stakeholders }
		# 	every_vassal = { add_to_list = stakeholders }
		# 	liege = { add_to_list = stakeholders }
		# 	every_relation = { type = friend add_to_list = stakeholders }
		# 	if = {
		# 		limit = { exists = dynasty }
		# 		dynasty.dynast = { add_to_list = stakeholders }
		# 		house.house_head = { add_to_list = stakeholders }
		# 	}
		# 	every_in_list = {
		# 		limit = { NOT = { this = prev }}
		# 		list = stakeholders
		# 		prev = { set_relation_stakeholder = prev }
		# 	}
		# }
	}
	on_end = {
		story_owner = {
			every_owned_story = {
				limit = { story_type = BMU_ambition_story }
				end_story = yes
			}
			remove_list_variable = {
				name = pressed_claim_gui
				target = scope:story.var:pressed_claim_story
			}
			if = {
				limit = { var:pressed_claim_interaction = scope:story.var:pressed_claim_story }
				remove_variable = pressed_claim_interaction
			}
			if = {
				limit = { any_held_title = { has_variable = unlanded_contender }}
				if = {
					limit = { is_landed = no }
					random_held_title = {
						limit = {
							has_variable = unlanded_contender
							has_variable = previous_court
							var:previous_court = { is_landed = yes }
						}
						var:previous_court = { save_scope_as = previous_court }
					}
				}
				every_held_title = {
					limit = { has_variable = unlanded_contender }
					prev = { destroy_title = prev }
				}
				if = {
					limit = { exists = scope:previous_court }
					scope:previous_court = { add_courtier = prev }
				}
			}
		}
		var:pressed_claim_story = {
			remove_list_variable = {
				name = contenders
				target = prev
			}
		}
		var:pressed_claim_story = {
			every_in_list = {
				variable = supporters
				limit = { var:contender = scope:story }
				end_story = yes
			}
		}
	}
	on_owner_death = {
		#TODO replace with event to primary_heir asking for course of action
		if = {
			limit = {
				var:pressed_claim_story.var:phase = flag:war_phase
				story_owner = { exists = primary_heir }
			}
			make_story_owner = story_owner.primary_heir
		}
		else = {
			#TODO send notifications to contender if supporter, to other contenders + own supporters if contender
			end_story = yes
		}
	}
	effect_group = {
		weeks = 1
		triggered_effect = {
			effect = {
			}
		}
	}
}

BMU_supporter_story = {
	on_setup = {
		if = {
			limit = { debug_only = yes }
			debug_log = "BMU_supporter_story"
			debug_log_scopes = no
		}
		set_variable = {
			name = stakeholder
			value = story_owner
		}
		set_variable = {
			name = story_owner
			value = story_owner
		}
		set_variable = {
			name = bargainer
			value = story_owner
		}
	}
	on_end = {
		story_owner = {
			every_owned_story = {
				limit = { story_type = BMU_ambition_story }
				end_story = yes
			}
			remove_list_variable = {
				name = pressed_claim_gui
				target = prev
			}
		}
		var:pressed_claim_story = {
			every_in_list = {
				variable = supporters
				limit = { var:contender = scope:story }
				end_story = yes
			}
			remove_list_variable = {
				name = supporters
				target = prev
			}
		}
	}
	on_owner_death = {
		#TODO replace with event to primary_heir asking for course of action
		if = {
			limit = {
				var:pressed_claim_story.var:phase = flag:war_phase
				story_owner = { exists = primary_heir }
			}
			make_story_owner = story_owner.primary_heir
		}
		else = {
			#TODO send notifications to contender if supporter, to other contenders + own supporters if contender
			end_story = yes
		}
	}
	effect_group = {
		weeks = 1
		triggered_effect = {
			trigger = { NOT = { var:pressed_claim_story.var:phase = flag:war_phase }}
			effect = {
				var:pressed_claim_story = {
					save_scope_as = pressed_claim
					ordered_in_list = {
						variable = contenders
						limit = { NOT = { this = scope:story.var:contender }}
						order_by = {
							story_owner = {
								save_temporary_scope_as = score_contender
								scope:story.story_owner = { add = BMU_contender_score }
							}
							min = 0
						}
						scope:story = {
							set_variable = {
								name = worthy_contender
								value = prev
							}
							prev.story_owner = { save_scope_as = score_contender }
							set_variable = {
								name = worthy_contender_score
								value = { scope:story.story_owner = { add = BMU_contender_score }}
							}
						}
					}
				}
				# var:contender.story_owner = { save_scope_as = score_contender }
				# save_scope_value_as = {
				# 	name = contender_score
				# 	value = { story_owner = { add = BMU_contender_score }}
				# }
				# if = {
				# 	limit = { scope:contender_score > 0 }
				# 	set_variable = {
				# 		name = contender_score
				# 		value = scope:contender_score
				# 	}
				# }
				# else = {
				# 	var:contender_score
				# 	end_story = yes
				# }
			}
		}
	}
}

BMU_stakeholder_story = {
	on_setup = {
		debug_log = "BMU_stakeholder_story"
		debug_log_scopes = no
		set_variable = {
			name = stakeholder
			value = story_owner
		}
		set_variable = {
			name = bargainer
			value = story_owner
		}
	}
	on_end = {
		var:pressed_claim_story = {
			remove_list_variable = {
				name = stakeholders
				target = prev
			}
			every_in_list = {
				variable = contenders
				story_owner = {
					remove_list_variable = {
						name = stakeholders_gui
						target = root
					}
				}
			}
		}
	}
	on_owner_death = {
	}
	effect_group = {
		weeks = 1
		triggered_effect = {
			effect = {
				BMU_calc_best_contenders = { PRESSED_CLAIM = var:pressed_claim_story }
			}
		}
	}
}