BMU_pressed_claim_story = {
	on_setup = {
		# handled in BMU_create_claim_press effect

		set_variable = {
			name = start_date
			value = current_date
		}
		set_variable = {
			name = phase
			value = flag:contention
		}
	}
	
	on_end = {
		every_in_list = {
			variable = BMU_stakeholder_stories
			limit = {}
			story_owner = {
				every_owned_story = {
					limit = { story_type = BMU_bargain_story }
					end_story = yes
				}
			}
			end_story = yes
		}
	}

	on_owner_death = {
		var:claimed_title = {
			ordered_title_heir = {
				save_scope_as = new_claim_target
			}
		}
		BMU_transfer_claimed_press = {
			PRESSED_CLAIM = this
			CLAIMED_TITLE = var:claimed_title
			OLD_CLAIM_TARGET = story_owner
			NEW_CLAIM_TARGET = scope:new_claim_target
		}
	}

	effect_group = {
		# months = 1
		days = 30
		first_valid = {
			triggered_effect = {
				trigger = { var:phase = flag:war_phase }
				effect = {
					save_scope_as = pressed_claim
				}
			}
			# War Phase
			triggered_effect = {
				trigger = { var:phase = flag:declaration_phase }
				effect = {
					save_scope_as = pressed_claim
					debug_log = "BMU_pressed_claim war_phase"
					debug_log_scopes = no
					set_variable = {
						name = phase
						value = flag:war_phase
					}
					var:claim_target = { save_scope_as = claim_target }
					var:claimed_title = {
						save_scope_as = claimed_title
						save_scope_as = old_title
					}
					every_in_list = {
						variable = BMU_pressed_claim_stakeholders
						limit = {
							has_variable = status
							var:status = flag:contender
							NOT = { story_owner = scope:claim_target }
							trigger_if = {
								limit = { story_owner = { is_landed = no }}
								story_owner = { save_temporary_scope_as = unlanded_contender }
								prev = {
									any_in_list = {
										variable = BMU_pressed_claim_stakeholders
										has_variable = status
										var:status = flag:supporter
										var:contender.story_owner = scope:unlanded_contender
									}
								}
							}
						}
						story_owner = {
							debug_log_scopes = no
							if = {
								limit = { is_landed = no }
								add_character_flag = flavorization_contender
								create_dynamic_title = {
									tier = duchy
									name = CONTENDER_TITLE_NAME
								}
								create_title_and_vassal_change = {
									type = created
									save_scope_as = change
									add_claim_on_loss = no
								}
								scope:new_title = {
									set_capital_county = scope:claimed_title.title_capital_county
									set_landless_title = yes
									set_destroy_on_succession = no
									set_delete_on_destroy = yes
									set_no_automatic_claims = yes
									set_definitive_form = yes
									set_can_be_named_after_dynasty = no
									change_title_holder = {
										holder = prev
										change = scope:change
									}
									set_variable = unlanded_contender
									generate_coa = pressed_claim
								}
								resolve_title_and_vassal_change = scope:change
							}
							start_war = {
								cb = BMU_pressed_claim_cb
								target = scope:claim_target
								claimant = this
								target_title = scope:claimed_title
							}
						}
					}
					every_in_list = {
						variable = BMU_pressed_claim_stakeholders
						limit = {
							has_variable = status
							var:status = flag:supporter
							has_variable = contender
						}
						story_owner = { save_scope_as = supporter }
						var:contender.story_owner = {
							every_character_war = {
								limit = { using_cb = BMU_pressed_claim_cb }
								if = {
									limit = { is_attacker = prev }
									add_attacker = scope:supporter
								}
								else = {
									add_defender = scope:supporter
								}
							}
						}
					}
				}
			}
			# Declaration Phase
			triggered_effect = {
				trigger = { var:phase = flag:bargaining_phase }
				effect = {
					save_scope_as = pressed_claim
					if = {
						limit = { var:bargaining_phase = 5 }
						set_variable = {
							name = phase
							value = flag:declaration_phase
						}
					}
					else = {
						debug_log = "BMU_pressed_claim declaration_phase"
						debug_log_scopes = no
						change_variable = {
							name = bargaining_phase
							add = 1
						}
					}
				}
			}
			# Bargaining Phase
			triggered_effect = {
				trigger = { var:phase = flag:rallying_phase }
				effect = {
					save_scope_as = pressed_claim
					debug_log = "BMU_pressed_claim bargaining_phase"
					debug_log_scopes = no
					set_variable = {
						name = phase
						value = flag:bargaining_phase
					}
					set_variable = {
						name = bargaining_phase
						value = 0
					}
				}
			}
			# Rallying Phase
			triggered_effect = {
				trigger = { var:phase = flag:contention_phase }
				effect = {
					save_scope_as = pressed_claim
					debug_log = "BMU_pressed_claim rallying_phase"
					debug_log_scopes = no

					set_variable = {
						name = phase
						value = flag:rallying_phase
					}

					# # Claim Target Allies
					# story_owner = {
					# 	save_scope_as = claim_target
					# 	every_ally = {
					# 		limit = {
					# 			any_owned_story = {
					# 				story_type = BMU_stakeholder_story
					# 				var:pressed_claim_story = scope:pressed_claim
					# 				count = 0
					# 			}
					# 			is_landed = yes
					# 		}
					# 		trigger_event = {
					# 			id = BMU_pressed_claim.0011
					# 			days = { 1 3 }
					# 		}
					# 	}
					# }

					# # Contender Allies
					# every_in_list = {
					# 	variable = BMU_pressed_claim_stakeholders
					# 	limit = {
					# 		var:pressed_claim_story = scope:pressed_claim
					# 		NOT = { story_owner = scope:claim_target }
					# 		has_variable = status
					# 		var:status = flag:contender
					# 	}
					# 	story_owner = { save_scope_as = contender }
					# 	story_owner = {
					# 		every_ally = {
					# 			limit = {
					# 				any_owned_story = {
					# 					story_type = BMU_stakeholder_story
					# 					var:pressed_claim_story = scope:pressed_claim
					# 					count = 0
					# 				}
					# 				is_landed = yes
					# 			}
					# 			trigger_event = {
					# 				id = BMU_pressed_claim.0012
					# 				days = { 4 7 }
					# 			}
					# 		}
					# 	}
					# }

					# # Claim title de jure vassals
					# story_owner = {
					# 	every_vassal = {
					# 		limit = {
					# 			# primary_title = { any_this_title_or_de_jure_above = { this = scope:pressed_claim.var:claimed_title }}
					# 			any_owned_story = {
					# 				story_type = BMU_stakeholder_story
					# 				var:pressed_claim_story = scope:pressed_claim
					# 				count = 0
					# 			}
					# 		}
					# 		trigger_event = {
					# 			id = BMU_pressed_claim.0013
					# 			days = { 8 14 }
					# 		}
					# 	}
					# 	if = {
					# 		limit = { scope:pressed_claim.var:claimed_title = scope:pressed_claim.var:claim_target.primary_title }
					# 		every_sub_realm_county = {
					# 			limit = {
					# 				NOR = {
					# 					any_this_title_or_de_jure_above = {
					# 						this = scope:pressed_claim.var:claimed_title
					# 					}
					# 					any_this_title_or_de_jure_above = {
					# 						tier = scope:pressed_claim.var:claimed_title.tier
					# 						holder = scope:pressed_claim.story_owner
					# 					}
					# 				}
					# 			}
					# 			every_de_jure_top_liege = {
					# 				limit = {
					# 					NOT = { this = scope:pressed_claim.var:claim_target }
					# 					any_owned_story = {
					# 						story_type = BMU_stakeholder_story
					# 						var:pressed_claim_story = scope:pressed_claim
					# 						count = 0
					# 					}
					# 				}
					# 				trigger_event = {
					# 					id = BMU_pressed_claim.0014
					# 					days = { 17 21 }
					# 				}
					# 			}
					# 		}
					# 	}
					# }
					
					set_variable = stakeholders_added
				}
			}
		}
	}

	# effect_group = {
	# 	days = 1
	# 	triggered_effect = {
	# 		effect = {
	# 			debug_log = "DEBUG DATE [GetCurrentDate]"
	# 		}
	# 	}
	# }
}

BMU_stakeholder_story = {
	on_setup = {
		debug_log = "BMU_stakeholder_story"
		debug_log_scopes = no
		set_variable = {
			name = stakeholder
			value = story_owner
		}
		set_variable = {
			name = bargainer
			value = story_owner
		}
		# set_variable = {
		# 	name = status
		# 	value = flag:pending_status
		# }
	}
	on_end = {
		story_owner = {
			remove_list_variable = {
				name = BMU_stakeholder_stories
				target = prev
			}
			every_owned_story = {
				limit = { story_type = BMU_ambition_story }
				end_story = yes
			}
		}
		var:pressed_claim_story = {
			remove_list_variable = {
				name = pressed_claim_gui
				target = prev
			}
		}
	}
	on_owner_death = {
		#TODO replace with event to primary_heir asking for course of action
		if = {
			limit = {
				OR = {
					var:status = flag:supporter
					var:status = flag:contender
				}
				var:pressed_claim_story.var:phase = flag:war_phase
				story_owner = { exists = primary_heir }
			}
			make_story_owner = story_owner.primary_heir
		}
		else = {
			#TODO send notifications to contender if supporter, to other contenders + own supporters if contender
			end_story = yes
		}
	}
	effect_group = {
		days = { 5 15 }
		triggered_effect = {
			trigger = {
				var:pressed_claim_story.var:phase = flag:bargaining_phase
				var:status = flag:contender
				NOT = { story_owner = { has_variable = pending_bargain_proposal }}
				story_owner = { is_ai = yes }
			}
			effect = {
				if = {
					limit = { debug_only = yes }
					debug_log = "Bargain AI Contender"
					story_owner = { debug_log_scopes = no }
				}
				save_scope_as = contender
				# var:pressed_claim_story = {
				# 	save_scope_as = pressed_claim
				# 	random_in_list = {
				# 		variable = BMU_pressed_claim_stakeholders
				# 		limit = {
				# 			BMU_can_bargain = { CONTENDER = scope:contender SUPPORTER = this }
				# 			save_temporary_scope_value_as = {
				# 				name = neg_contender_score
				# 				value = { story_owner = { scope:contender.story_owner = { subtract = BMU_contender_score }}}
				# 			}
				# 			save_temporary_scope_as = supporter
				# 			any_in_list = {
				# 				variable = BMU_stakeholder_ambitions
				# 				save_temporary_scope_as = bargain_temp
				# 				BMU_bargain_can_be_struck = { CONTENDER = scope:contender SUPPORTER = scope:supporter }
				# 				scope:supporter.story_owner = { scope:contender.story_owner = { scope:bargain_temp.var:ambition_score > scope:neg_contender_score }}
				# 				scope:contender.story_owner = { FF_ambition_cost > 0 }
				# 			}
				# 		}
				# 		weight = {
				# 			base = 0
				# 			modifier = {
				# 				add = story_owner.max_military_strength
				# 			}
				# 			modifier = {
				# 				var:status = flag:supporter
				# 				var:contender = scope:contender
				# 				factor = 0.5
				# 			}
				# 		}
				# 		save_scope_as = supporter
				# 		if = {
				# 			limit = { debug_only = yes }
				# 			debug_log = "random stakeholder"
				# 			story_owner = { debug_log_scopes = no }
				# 		}
				# 		save_scope_value_as = {
				# 			name = neg_contender_score
				# 			value = { story_owner = { scope:contender.story_owner = { subtract = BMU_contender_score }}}
				# 		}
				# 		random_in_list = {
				# 			variable = BMU_stakeholder_ambitions
				# 			limit = {
				# 				save_temporary_scope_as = bargain_temp
				# 				BMU_bargain_can_be_struck = { CONTENDER = scope:contender SUPPORTER = scope:supporter }
				# 				scope:supporter.story_owner = { scope:contender.story_owner = { scope:bargain_temp.var:ambition_score > scope:neg_contender_score }}
				# 				scope:contender.story_owner = { FF_ambition_cost > 0 }
				# 			}
				# 			save_scope_as = bargain
				# 			set_variable = pending
				# 			if = {
				# 				limit = { debug_only = yes }
				# 				debug_log_scopes = no
				# 				scope:supporter.story_owner = { debug_log_scopes = no }
				# 				var:ambition = { debug_log_scopes = no }
				# 			}
				# 			BMU_send_bargain = { CONTENDER = scope:contender }
				# 		}
				# 	}
				# }
			}
		}
	}
}