BMU_drop_out_interaction = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no
	common_interaction = yes
	ignores_pending_interaction_block = yes
	interface_priority = -1
	icon = icon_claim_pressed

	desc = BMU_drop_out_interaction_desc

	

	auto_accept = yes

	popup_on_receive = yes
	pause_on_receive = yes
	ignores_pending_interaction_block = no
	show_answer_notification = no

	ai_min_reply_days = 0							# Minimum days before ai replies
	ai_max_reply_days = 0

	greeting = negative
	notification_text = BMU_drop_out_interaction_notification

	target_type = title
	target_filter = recipient_domain_titles

	cooldown_against_recipient = { years = 1 }

	redirect = {
	}

	is_shown = {
		scope:actor = {
			any_contender_story = {
				var:pressed_claim_story.var:claim_target = scope:recipient
			}
		}
	}

	is_valid = {
	}
	
	is_valid_showing_failures_only = {
		scope:actor = {
			any_contender_story = {
				var:pressed_claim_story.var:claim_target = scope:recipient
				NOR = {
					var:pressed_claim_story.var:phase = flag:contention_phase
					var:pressed_claim_story.var:phase = flag:war_phase
				}
			}
		}
	}

	has_valid_target_showing_failures_only = {
		# scope:actor = {
		# 	any_claim = {
		# 		save_temporary_scope_as = claim
		# 		trigger_if = {
		# 			limit = { exists = holder }
		# 			holder = scope:recipient
		# 		}
		# 		custom_tooltip = {
		# 			text = BMU_pressed_claim_cooldown
		# 			NOT = { scope:target = { has_variable = pressed_claim_cooldown }}
		# 		}
		# 		trigger_if = {
		# 			limit = { has_variable = pressed_claim }
		# 			NOR = {
		# 				custom_description = {
		# 					text = BMU_too_late_to_join_pressed_claim
		# 					object = var:pressed_claim
		# 					var:pressed_claim = {
		# 						trigger_if = {
		# 							limit = { scope:actor = { is_ai = yes }}
		# 							NOT = { var:phase = flag:contention_phase }
		# 						}
		# 						trigger_else = {
		# 							OR = {
		# 								var:phase = flag:declaration_phase
		# 								var:phase = flag:war_phase
		# 							}
		# 						}
		# 					}
		# 				}
		# 				custom_description = {
		# 					text = BMU_already_involved_in_pressed_claim
		# 					scope:actor = {
		# 						any_contender_story = {
		# 							var:pressed_claim_story.var:claimed_title = scope:claim
		# 						}
		# 					}
		# 				}
		# 			}
		# 		}
		# 	}
		# }
	}

	can_be_picked_title = {
		scope:actor = {
			any_contender_story = {
				var:pressed_claim_story.var:claim_target = scope:recipient
				NOR = {
					var:pressed_claim_story.var:phase = flag:contention_phase
					var:pressed_claim_story.var:phase = flag:war_phase
				}
				var:pressed_claim_story.var:claimed_title = scope:target
			}
		}
	}

	can_send = {
		# custom_tooltip = {
		# 	text = BMU_pressed_claim_cooldown
		# 	NOT = { scope:target = { has_variable = pressed_claim_cooldown }}
		# }
	}	

	on_send = {
		if = {
			limit = { debug_only = yes }
			debug_log = "BMU_drop_out_interaction on_send"
			debug_log_scopes = yes
		}
	}
	
	on_accept = {
		if = {
			limit = { debug_only = yes }
			debug_log = "BMU_drop_out_interaction on_accept"
			debug_log_scopes = yes
		}

		if = {
			limit = {
				NOT = { exists = scope:pressed_claim }
				exists = scope:target
			}
			scope:actor = {
				random_contender_story = {
					limit = {
						var:pressed_claim_story.var:claim_target = scope:recipient
						var:pressed_claim_story.var:claimed_title = scope:target
					}
					var:pressed_claim_story = { save_scope_as = pressed_claim }
				}
			}
		}

		BMU_dropout_contender = {
			PRESSED_CLAIM = scope:pressed_claim
			CONTENDER = scope:actor
		}

		if = {
			limit = { exists = scope:pressed_claim }
			scope:pressed_claim = {
				every_in_list = {
					variable = contenders
					limit = { NOT = { story_owner = scope:recipient }}
					trigger_event = BMU_pressed_claim.0050
				}
			}
		}
	}

	ai_potential = { any_contender_story = { count > 0 }}

	ai_targets = {
		ai_recipients = liege
	}

	ai_frequency = 1

	ai_will_do = {
		base = 0
		modifier = {
			exists = scope:target
			scope:actor = {
				any_contender_story = {
					var:pressed_claim_story.var:claim_target = scope:recipient
					var:pressed_claim_story.var:claimed_title = scope:target
					save_temporary_scope_as = contender_story
				}
				save_temporary_scope_as = pressed_claim
			}
			add = 0
		}
		modifier = {
			add = {
				value = 100
				subtract = scope:contender_story.var:confidence_score
				subtract = scope:contender_story.var:pressed_claim_story.FF_pressed_claim_story_time_remaining
			}
		}
	}
}

BMU_offer_support_interaction = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no
	common_interaction = yes
	ignores_pending_interaction_block = yes
	interface_priority = -1
	icon = icon_claim_pressed

	desc = BMU_offer_support_interaction_desc

	greeting = positive
	notification_text = BMU_offer_support_interaction_notification

	auto_accept = no
	ai_maybe = yes
	ai_min_reply_days = 4
	ai_max_reply_days = 9

	popup_on_receive = yes
	pause_on_receive = yes
	can_send_despite_rejection = no
	ignores_pending_interaction_block = no

	localization_values = {
		# GAMBIT_COST = BMU_supporter_gambit_cost
		GAMBIT_COST = 100
	}

	redirect = {
		scope:actor = {
			if = {
				limit = {
					has_variable = pressed_claim_interaction
					var:pressed_claim_interaction = { save_temporary_scope_as = pressed_claim }
				}
				var:pressed_claim_interaction.story_owner = { save_scope_as = secondary_actor }
			}
		}
	}

	is_shown = {
		# trigger_if = {
		# 	limit = { scope:actor = { NOT = { has_variable = BMU_request_support_interaction_script_override }}}
		# }
		scope:actor = { has_variable = pressed_claim_interaction }
		exists = scope:actor.var:pressed_claim_interaction
		scope:actor.var:pressed_claim_interaction.var:phase = flag:rallying_phase
		NOT = { scope:actor = scope:recipient }
		scope:recipient = {
			any_contender_story = { var:pressed_claim_story = scope:actor.var:pressed_claim_interaction }
			OR = {
				scope:actor = { any_supporter_story = { var:pressed_claim_story = scope:actor.var:pressed_claim_interaction }}
				BMU_target_is_relevant_in_pressed_claim_v2 = { TARGET = scope:actor PRESSED_CLAIM = scope:actor.var:pressed_claim_interaction }
				scope:actor = { BMU_is_claim_target_vassal_that_follows_pressed_claim = { PRESSED_CLAIM = scope:actor.var:pressed_claim_interaction }}
			}
		}
	}
	
	is_valid_showing_failures_only = {
		trigger_if = {
			limit = { scope:actor = { NOT = { has_variable = BMU_request_support_interaction_script_override }}}
			trigger_if = {
				limit = { NOT = { exists = scope:pressed_claim }}
				scope:actor.var:pressed_claim_interaction = { save_temporary_scope_as = pressed_claim }
			}
			scope:recipient = {
				any_contender_story = {
					var:pressed_claim_story = scope:pressed_claim
					save_temporary_scope_as = contender
				}
				BMU_has_enough_remaining_gambits = yes
			}
			scope:actor = {
				NOT = {
					custom_description = {
						text = BMU_involved_in_another_pressed_claim
						subject = scope:actor
						any_contender_story = {
							count > 0
						}
					}
				}
				NOT = {
					custom_description = {
						text = BMU_already_support_contender
						subject = scope:actor
						object = scope:recipient
						any_supporter_story = {
							var:pressed_claim_story = scope:actor.var:pressed_claim_interaction
							var:contender.story_owner = scope:recipient
						}
					}
				}
				trigger_if = {
					limit = {
						NAND = {
							exists = joined_faction
							joined_faction = {
								faction_is_type = claimant_faction
								faction_target = scope:secondary_actor
								special_title = scope:actor.var:pressed_claim_interaction.var:claimed_title
								special_character = scope:recipient
							}
						}
					}
				}
			}
			scope:recipient = {
				BMU_has_enough_remaining_gambits = yes
			}
		}
	}

	can_send = {
		
	}

	on_send = {
		if = {
			limit = { debug_only = yes }
			debug_log = "BMU_request_support_interaction on_send"
			debug_log_scopes = yes
			if = {
				limit = { exists = scope:pressed_claim }
				scope:pressed_claim = { debug_log_scopes = no }
			}
			else = {
				debug_log = "no scope:pressed_claim"
			}
		}
		BMU_spend_gambits_effect_recipient = yes
	}
	
	on_accept = {
		if = {
			limit = { debug_only = yes }
			debug_log = "BMU_request_support_interaction on_accept"
			debug_log_scopes = yes
			if = {
				limit = { exists = scope:pressed_claim }
				scope:pressed_claim = { debug_log_scopes = no }
			}
			else = {
				debug_log = "no scope:pressed_claim"
			}
		}
		if = {
			limit = { NOT = { exists = scope:pressed_claim }}
			scope:actor.var:pressed_claim_interaction = { save_scope_as = pressed_claim }
		}

		BMU_request_support = {
			PRESSED_CLAIM = scope:pressed_claim
			CONTENDER = scope:recipient
			SUPPORTER = scope:actor
		}
	}

	on_decline = {
		BMU_refund_gambits_effect = yes
	}

	ai_accept = {
		base = 0
		BMU_support_will_do_modifier = { CONTENDER = scope:recipient SUPPORTER = scope:actor }
	}

	ai_will_do = {
		base = 0
		BMU_support_will_do_modifier = { CONTENDER = scope:recipient SUPPORTER = scope:actor }
	}

	ai_targets = {
		ai_recipients = vassals
		max = 10
	}

	ai_targets = {
		ai_recipients = scripted_relations
	}

	ai_potential = {
		any_vassal_or_below = {
			any_pressed_claim = {
				any_in_list = {
					variable = contenders
					trigger_if = {
						limit = { story_owner = { is_independent_ruler = yes }}
						NOT = { story_owner.highest_held_title_tier < root.highest_held_title_tier }
					}
					trigger_else = {
						NOT = { root = { is_liege_or_above_of = prev.story_owner }}
					}
				}
			}
		}
	}

	ai_frequency = 1
}