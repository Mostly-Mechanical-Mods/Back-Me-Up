BMU_bargain_with_council_position_interaction = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no
	common_interaction = yes
	ignores_pending_interaction_block = yes
	interface_priority = -1
	icon = bargain_council_position

	desc = BMU_bargain_with_council_position_interaction_desc

	auto_accept = no
	ai_min_reply_days = 0 #4
	ai_max_reply_days = 0 #9

	popup_on_receive = yes
	pause_on_receive = yes
	can_send_despite_rejection = no
	ignores_pending_interaction_block = no

	redirect = {
		scope:actor = {
			if = {
				limit = {
					has_variable = pressed_claim_interaction
					var:pressed_claim_interaction = { save_temporary_scope_as = pressed_claim }
				}
				var:pressed_claim_interaction.story_owner = { save_scope_as = secondary_actor }
				scope:recipient = {
					ordered_supporter_story = {
						limit = {
							var:pressed_claim_story = scope:pressed_claim
							NOR = {
								var:contender.story_owner = scope:actor
								var:contender.story_owner = scope:secondary_actor
							}
						}
						var:contender.story_owner = { save_scope_as = secondary_recipient }
					}
					if = {
						limit = {
							NOT = { exists = scope:secondary_recipient }
							scope:actor = { has_variable = pressed_claim_interaction }
						}
						scope:pressed_claim = {
							ordered_in_list = {
								variable = contenders
								limit = {
									NOR = {
										story_owner = scope:actor
										story_owner = scope:secondary_actor
									}
								}
								order_by = {
									story_owner = {
										save_temporary_scope_as = score_contender
										scope:recipient = { add = BMU_contender_score }
									}
								}
								if = {
									limit = {
										story_owner = {
											save_temporary_scope_as = score_contender
											scope:recipient = { BMU_contender_score > 0 }
										}
									}
									story_owner = { save_scope_as = secondary_recipient }
								}
								# story_owner = { save_scope_as = secondary_recipient }
							}
						}
					}
				}
			}
		}
	}

	is_shown = {
		scope:actor = {
			is_character_interaction_shown = {
				interaction = BMU_call_in_supporter_interaction
				recipient = scope:recipient
			}
		}
	}
	
	is_valid_showing_failures_only = {
		scope:actor = {
			is_character_interaction_valid = {
				interaction = BMU_call_in_supporter_interaction
				recipient = scope:recipient
			}
		}
		scope:actor.var:pressed_claim_interaction = { save_temporary_scope_as = pressed_claim }
		scope:recipient = {
			trigger_if = {
				limit = { BMU_can_be_councillor_of = { TARGET = scope:actor }}
				OR = {
					trigger_if = {
						limit = { NOT = { scope:actor = { BMU_bargained_with_council_position = { POSITION = councillor_chancellor }}}}
						trigger_if = {
							limit = { BMU_can_be_chancellor_of = { COURT_OWNER = scope:actor }}
							BMU_wants_council_position = { POSITION = councillor_chancellor }
						}
						trigger_else = {
							BMU_can_be_chancellor_of = { COURT_OWNER = scope:actor }
						}
					}
					trigger_else = { NOT = { scope:actor = { BMU_bargained_with_council_position = { POSITION = councillor_chancellor }}}}
					trigger_if = {
						limit = { NOT = { scope:actor = { BMU_bargained_with_council_position = { POSITION = councillor_steward }}}}
						trigger_if = {
							limit = { BMU_can_be_steward_of = { COURT_OWNER = scope:actor }}
							BMU_wants_council_position = { POSITION = councillor_steward }
						}
						trigger_else = {
							BMU_can_be_steward_of = { COURT_OWNER = scope:actor }
						}
					}
					trigger_else = { NOT = { scope:actor = { BMU_bargained_with_council_position = { POSITION = councillor_steward }}}}
					trigger_if = {
						limit = { NOT = { scope:actor = { BMU_bargained_with_council_position = { POSITION = councillor_marshal }}}}
						trigger_if = {
							limit = { BMU_can_be_marshal_of = { COURT_OWNER = scope:actor }}
							BMU_wants_council_position = { POSITION = councillor_marshal }
						}
						trigger_else = {
							BMU_can_be_marshal_of = { COURT_OWNER = scope:actor }
						}
					}
					trigger_else = { NOT = { scope:actor = { BMU_bargained_with_council_position = { POSITION = councillor_steward }}}}
					trigger_if = {
						limit = { NOT = { scope:actor = { BMU_bargained_with_council_position = { POSITION = councillor_spymaster }}}}
						trigger_if = {
							limit = { BMU_can_be_spymaster_of = { COURT_OWNER = scope:actor }}
							BMU_wants_council_position = { POSITION = councillor_spymaster }
						}
						trigger_else = {
							BMU_can_be_spymaster_of = { COURT_OWNER = scope:actor }
						}
					}
					trigger_else = { NOT = { scope:actor = { BMU_bargained_with_council_position = { POSITION = councillor_spymaster }}}}
				}
			}
			trigger_else = { BMU_can_be_councillor_of = { TARGET = scope:actor}}
		}
	}

	can_send = {
		scope:actor.var:pressed_claim_interaction = { save_temporary_scope_as = pressed_claim }
		scope:actor = {
			any_contender_story = {
				var:pressed_claim_story = scope:pressed_claim
				BMU_gambit_remaining >= BMU_supporter_gambit_cost
			}
		}
	}

	options_heading = BMU_bargain_council_position_interaction_option
	# flag:FF_ambition_get_council_position
	send_option = {
		is_shown = { always = no }
		is_valid = { always = no }
		flag = FF_ambition_get_council_position
	}
	# flag:councillor_chancellor
	send_option = {
		is_shown = { }								# Is option shown
		is_valid = {
			scope:actor = {
				trigger_if = {
					limit = { exists = cp:councillor_chancellor }
					cp:councillor_chancellor = { can_be_fired_from_council_trigger = { COURT_OWNER = scope:actor }}
				}
				NOT = { BMU_bargained_with_council_position = { POSITION = councillor_chancellor }}
			}
			scope:recipient = {
				BMU_can_be_chancellor_of = { COURT_OWNER = scope:actor }
				BMU_wants_council_position = { POSITION = councillor_chancellor }
			}
		}
		flag = councillor_chancellor
		localization = BMU_bargain_council_position_interaction_option_chancellor
		can_invalidate_interaction = no
	}
	# flag:councillor_steward
	send_option = {
		is_shown = { }								# Is option shown
		is_valid = {
			scope:actor = {
				trigger_if = {
					limit = { exists = cp:councillor_steward }
					cp:councillor_steward = { can_be_fired_from_council_trigger = { COURT_OWNER = scope:actor }}
				}
				NOT = { BMU_bargained_with_council_position = { POSITION = councillor_steward }}
			}
			scope:recipient = {
				BMU_can_be_steward_of = { COURT_OWNER = scope:actor }
				BMU_wants_council_position = { POSITION = councillor_steward }
			}
		}
		flag = councillor_steward
		localization = BMU_bargain_council_position_interaction_option_steward
		can_invalidate_interaction = no
	}
	# flag:councillor_marshal
	send_option = {
		is_shown = { }								# Is option shown
		is_valid = {
			scope:actor = {
				trigger_if = {
					limit = { exists = cp:councillor_marshal }
					cp:councillor_marshal = { can_be_fired_from_council_trigger = { COURT_OWNER = scope:actor }}
				}
				NOT = { BMU_bargained_with_council_position = { POSITION = councillor_marshal }}
			}
			scope:recipient = {
				BMU_can_be_marshal_of = { COURT_OWNER = scope:actor }
				BMU_wants_council_position = { POSITION = councillor_marshal }
			}
		}
		flag = councillor_marshal
		localization = BMU_bargain_council_position_interaction_option_marshal
		can_invalidate_interaction = no
	}
	# flag:councillor_spymaster
	send_option = {
		is_shown = { }								# Is option shown
		is_valid = {
			scope:actor = {
				trigger_if = {
					limit = { exists = cp:councillor_spymaster }
					cp:councillor_spymaster = { can_be_fired_from_council_trigger = { COURT_OWNER = scope:actor }}
				}
				NOT = { BMU_bargained_with_council_position = { POSITION = councillor_spymaster }}
			}
			scope:recipient = {
				BMU_can_be_spymaster_of = { COURT_OWNER = scope:actor }
				BMU_wants_council_position = { POSITION = councillor_spymaster }
			}
		}
		flag = councillor_spymaster
		localization = BMU_bargain_council_position_interaction_option_spymaster
		can_invalidate_interaction = no
	}

	on_send = {
		if = {
			limit = { debug_only = yes }
			debug_log = "BMU_bargain_with_council_position_interaction on_send"
			debug_log_scopes = yes
		}
		scope:actor = {
			set_variable = {
				name = pending_bargain
				value = scope:recipient
			}
		}
		BMU_spend_gambits_effect = yes
	}
	
	on_accept = {
		if = {
			limit = { debug_only = yes }
			debug_log = "BMU_bargain_with_council_position_interaction on_accept"
			debug_log_scopes = yes
			if = {
				limit = { NOT = { exists = scope:pressed_claim }}
				debug_log = "NO PRESSED CLAIM"
			}
		}

		if = {
			limit = { NOT = { exists = scope:pressed_claim }}
			scope:actor.var:pressed_claim_interaction = { save_scope_as = pressed_claim }
		}

		if = {
			limit = { scope:actor = { has_variable = pressed_claim_interaction }}
			scope:actor.var:pressed_claim_interaction = { save_scope_as = actor_pressed_claim_interaction }
		}
		scope:actor = { set_variable = { name = pressed_claim_interaction value = scope:pressed_claim }}

		scope:actor = {
			random_contender_story = {
				limit = { var:pressed_claim_story = scope:pressed_claim }
				save_scope_as = contender
				custom_description = {
					text = BMU_spend_gambits
					subject = scope:actor
					object = scope:recipient
					value = BMU_supporter_gambit_cost
				}
			}
		}

		scope:recipient = {
			custom_description = {
				text = BMU_start_supporting_contender
				subject = scope:recipient
				object = scope:actor
			}
			run_interaction = {
				interaction = BMU_call_in_supporter_interaction
				actor = scope:actor
				recipient = scope:recipient
				redirect = yes
				execute_threshold = decline
			}
		}

		if = {
			limit = { exists = scope:actor_pressed_claim_interaction }
			scope:actor = { set_variable = { name = pressed_claim_interaction value = scope:actor_pressed_claim_interaction }}
		}
		else = { scope:actor = { remove_variable = pressed_claim_interaction }}

		BMU_create_bargain_get_council_position = {
			PRESSED_CLAIM = scope:pressed_claim
			CONTENDER = scope:actor
			SUPPORTER = scope:recipient
		}
				
		scope:actor = {
			custom_description_no_bullet = {
				text = BMU_if_pressed_claim_won
				subject = scope:actor
				object = scope:pressed_claim.var:claimed_title
			}
			show_as_tooltip = {
				if = {
					limit = { scope:councillor_chancellor = yes }
					assign_councillor_type = {
						type = councillor_chancellor
						target = scope:recipient
					}
				}
				else_if = {
					limit = { scope:councillor_steward = yes }
					assign_councillor_type = {
						type = councillor_steward
						target = scope:recipient
					}
				}
				else_if = {
					limit = { scope:councillor_marshal = yes }
					assign_councillor_type = {
						type = councillor_marshal
						target = scope:recipient
					}
				}
				else_if = {
					limit = { scope:councillor_spymaster = yes }
					assign_councillor_type = {
						type = councillor_spymaster
						target = scope:recipient
					}
				}
			}
		}

		
	}

	on_decline = {
		BMU_refund_gambits_effect = yes
	}

	
	ai_accept = {
		base = 0
		BMU_bargain_setup = yes
		BMU_call_in_supporter_interaction = yes
		modifier = {
			scope:councillor_chancellor = yes
			add = BMU_ambition_get_council_position_councillor_chancellor
			desc = "[GuiScope.SetRoot(recipient.MakeScope).AddScope('score_contender',actor.MakeScope).AddScope('score_supporter',recipient.MakeScope).AddScope('claim_target',secondary_actor.MakeScope).AddScope('holder_candidate',secondary_actor.MakeScope).AddScope('claimed_title',actor.MakeScope.Var('pressed_claim_interaction').Var('claimed_title').Title.MakeScope).GetScriptValueDesc('BMU_ambition_get_council_position_councillor_chancellor')]"
		}
		modifier = {
			scope:councillor_steward = yes
			add = BMU_ambition_get_council_position_councillor_steward
			desc = "[GuiScope.SetRoot(recipient.MakeScope).AddScope('score_contender',actor.MakeScope).AddScope('score_supporter',recipient.MakeScope).AddScope('claim_target',secondary_actor.MakeScope).AddScope('holder_candidate',secondary_actor.MakeScope).AddScope('claimed_title',actor.MakeScope.Var('pressed_claim_interaction').Var('claimed_title').Title.MakeScope).GetScriptValueDesc('BMU_ambition_get_council_position_councillor_steward')]"
		}
		modifier = {
			scope:councillor_marshal = yes
			add = BMU_ambition_get_council_position_councillor_marshal
			desc = "[GuiScope.SetRoot(recipient.MakeScope).AddScope('score_contender',actor.MakeScope).AddScope('score_supporter',recipient.MakeScope).AddScope('claim_target',secondary_actor.MakeScope).AddScope('holder_candidate',secondary_actor.MakeScope).AddScope('claimed_title',actor.MakeScope.Var('pressed_claim_interaction').Var('claimed_title').Title.MakeScope).GetScriptValueDesc('BMU_ambition_get_council_position_councillor_marshal')]"
		}
		modifier = {
			scope:councillor_spymaster = yes
			add = BMU_ambition_get_council_position_councillor_spymaster
			desc = "[GuiScope.SetRoot(recipient.MakeScope).AddScope('score_contender',actor.MakeScope).AddScope('score_supporter',recipient.MakeScope).AddScope('claim_target',secondary_actor.MakeScope).AddScope('holder_candidate',secondary_actor.MakeScope).AddScope('claimed_title',actor.MakeScope.Var('pressed_claim_interaction').Var('claimed_title').Title.MakeScope).GetScriptValueDesc('BMU_ambition_get_council_position_councillor_spymaster')]"
		}
		modifier = {
			add = BMU_ambition_has_council_position
			desc = "[GuiScope.SetRoot(recipient.MakeScope).AddScope('score_contender',actor.MakeScope).AddScope('score_supporter',recipient.MakeScope).AddScope('claim_target',secondary_actor.MakeScope).AddScope('holder_candidate',secondary_actor.MakeScope).AddScope('claimed_title',actor.MakeScope.Var('pressed_claim_interaction').Var('claimed_title').Title.MakeScope).GetScriptValueDesc('BMU_ambition_has_council_position')]"
		}
	}

	ai_will_do = {
		modifier = {
			trigger_if = {
				limit = { NOT = { exists = scope:pressed_claim }}
				scope:actor.var:pressed_claim_interaction = { save_temporary_scope_as = pressed_claim }
			}
			any_owned_story = {
				story_type = BMU_contender_story
				var:pressed_claim_story = scope:pressed_claim
				save_temporary_scope_as = actor_contender
			}
			scope:recipient = {
				any_owned_story = {
					story_type = BMU_contender_story
					var:pressed_claim_story = scope:pressed_claim
					save_temporary_scope_as = recipient_contender
				}
			}
			add = 0
		}
		modifier = {
			add = BMU_support_will_do
		}
	}

	# ai_will_do = {
	# 	base = 0
	# 	BMU_bargain_setup = yes
	# 	modifier = {
	# 		any_councillor = {
	# 			trigger_if = { limit = { scope:councillor_chancellor = yes } has_council_position = councillor_chancellor }
	# 			trigger_else_if = { limit = { scope:councillor_steward = yes } has_council_position = councillor_steward }
	# 			trigger_else_if = { limit = { scope:councillor_marshal = yes } has_council_position = councillor_marshal }
	# 			trigger_else_if = { limit = { scope:councillor_spymaster = yes } has_council_position = councillor_spymaster }
	# 			trigger_else = { always = no }
	# 			any_supporter_story = {
	# 				var:pressed_claim_story = scope:actor.var:pressed_claim_interaction
	# 				var:contender.story_owner = scope:actor
	# 				prev = { save_temporary_scope_as = current_councillor }
	# 			}
	# 		}
	# 		add = {
	# 			add = scope:current_councillor.max_military_strength
	# 			divide = scope:recipient.max_military_strength
	# 			multiply = 100
	# 			subtract = 100
	# 		}
	# 		desc = "BMU_bargain_for_council_position_weaker_than_current_councillor_supporter"
	# 	}
	# }

	ai_targets = {
		ai_recipients = liege
	}

	ai_targets = {
		ai_recipients = scripted_relations
	}

	ai_targets = {
		ai_recipients = vassals
		max = 10
	}

	ai_targets = {
		ai_recipients = family
		max = 10
	}

	ai_potential = {
		any_contender_story = {
			var:pressed_claim_story = {
				var:phase = flag:rallying_phase
			}
		}
	}

	ai_frequency = 1
}
