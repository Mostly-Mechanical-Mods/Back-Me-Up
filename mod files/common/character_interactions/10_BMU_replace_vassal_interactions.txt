create_claimant_faction_against_interaction = {
	category = interaction_category_vassal
	use_diplomatic_range = no

	desc = create_claimant_faction_against_interaction_desc

	special_interaction = create_claimant_faction_against_interaction
	interface = create_claimant_faction_against

	is_shown = {
		NOT = { scope:actor = scope:secondary_actor }
		scope:actor.liege = scope:secondary_actor
		scope:actor = {
			custom_description = {
				text = "faction_can_join_create_in_another_faction"
				is_a_faction_member = no
			}
			highest_held_title_tier > tier_barony
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = { NOT = { has_truce = scope:secondary_actor }}
		#[BMU]
		trigger_if = {
			limit = {
				exists = scope:recipient
				exists = scope:landed_title
			}
			custom_tooltip = {
				text = BMU_pressed_claim_cooldown
				NOT = { scope:landed_title = { has_variable = pressed_claim_cooldown }}
			}
			scope:secondary_actor = { save_temporary_scope_as = candidate }
			scope:secondary_actor = { save_temporary_scope_as = claim_target }
			scope:secondary_actor = { save_temporary_scope_as = holder_candidate }
			scope:secondary_actor = { save_temporary_scope_as = score_contender }
			scope:recipient = { save_temporary_scope_as = score_supporter }
			scope:landed_title = {
				save_temporary_scope_as = claimed_title
				save_temporary_scope_as = coveted_title
			}
			trigger_if = {
				limit = { scope:recipient = { is_ai = yes }}
				NOT = {
					custom_description = {
						text = BMU_contender_score_trigger
						subject = scope:recipient
						object = scope:secondary_actor
						scope:recipient = { BMU_contender_score_gui >= 0 }
					}
				}
			}
			trigger_if = {
				limit = {
					scope:recipient = { is_ai = yes }
					scope:recipient = { BMU_contender_score_gui < 0 }
				}
				scope:recipient = {
					custom_description = {
						text = BMU_ambition_get_title_trigger
						subject = scope:recipient
						object = scope:claimed_title
						FF_ambition_get_title > 0
					}
				}
			}
			scope:secondary_actor = {
				NOT = {
					custom_description = {
						text = BMU_ongoing_pressed_claim
						subject = scope:landed_title
						any_owned_story = {
							story_type = BMU_pressed_claim_story
							var:claimed_title = scope:landed_title
						}
					}
				}
			}
			scope:recipient = {
				trigger_if = {
					limit = {
						exists = joined_faction
						joined_faction = { faction_is_type = claimant_faction }
					}
					NOT = {
						custom_description = {
							text = BMU_claimant_already_in_claimant_faction
							subject = scope:recipient
							object = joined_faction.special_character
							joined_faction = { faction_is_type = claimant_faction }
						}
					}
				}
			}
		}
		#[/BMU]
		scope:secondary_actor = {
			trigger_if = {
				limit = {
					NOT = {
						any_held_title = {
							any_claimant = {}
						}
					}
				}
				custom_description = {
					text = "basic_claimant_found"
					always = no
				}
			}
			trigger_else = {
				custom_description = {
					text = "basic_capable_claimant_found"
					any_held_title = {
						any_claimant = {
							NOT = { has_trait = incapable }
						}
					}
				}
			}

			trigger_if = {
				limit = {
					exists = scope:landed_title
				}
				custom_description = {
					text = "claimant_faction_already_exists"
					subject = scope:landed_title
					object = scope:recipient
					NOT = {
						any_targeting_faction = {
							faction_is_type = claimant_faction
							special_character = scope:recipient
							special_title = scope:landed_title
						}
					}
				}
			}
		}
		scope:actor = {
			can_join_or_create_faction_against = {
				who = scope:secondary_actor
				faction = claimant_faction
				check_in_a_faction = no # already checked in is_shown. Via the faction interface we'd see this twice if it fails (TIT-11380)
			}
		}
		trigger_if = {
			limit = {
				exists = scope:recipient
			}
			scope:recipient = {
				NOT = { is_at_war_with = scope:actor }
				NOT = { has_trait = incapable }
			}
		}
		scope:secondary_actor = { NOT = { has_strong_hook = scope:actor } }
	}

	on_send = {
		# [BMU]
		if = {
			limit = { debug_only = yes }
			debug_log = "claimant faction created"
			debug_log_scopes = yes
		}
		scope:secondary_actor = { save_scope_as = claim_target }
		scope:landed_title = { save_scope_as = claimed_title }
		scope:recipient = {
			scope:secondary_actor = {
				save_scope_value_as = {
					name = BMU_contender_score
					value = BMU_contender_score
				}
			}
		}
		if = {
			limit = { debug_only = yes }
			debug_log = "BMU_contender_score"
			scope:BMU_contender_score = { debug_log_scopes = no }
		}
		# [/BMU]
		scope:actor = {
			set_variable = {
				name = claiming_title
				value = scope:landed_title
			}

			if = {
				limit = {
					can_create_faction = {
						type = claimant_faction
						target = scope:secondary_actor
					}
				}

				create_faction = {
					type = claimant_faction
					target = scope:secondary_actor
				}
				joined_faction = {
					set_special_character = scope:recipient
					set_special_title = scope:landed_title
				}
				scope:recipient = {
					add_to_variable_list = {
						name = claimant_factions
						target = scope:actor.joined_faction
					}
				}

				if = {
					limit = { NOT = { this = scope:recipient } }
					save_scope_as = faction_invite_from
					joined_faction = { save_scope_as = faction }
					scope:secondary_actor = { save_scope_as = faction_target }
					scope:recipient = {
						trigger_event = faction_invitation.0001
					}
				}
			}

			remove_variable = claiming_title
		}
	}

	auto_accept = yes
}