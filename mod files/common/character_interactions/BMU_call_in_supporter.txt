BMU_call_in_supporter_interaction = {
	category = interaction_category_pressed_claim
	use_diplomatic_range = no
	common_interaction = yes
	ignores_pending_interaction_block = yes
	interface_priority = -1
	icon = bargain_council_position

	desc = BMU_call_in_supporter_interaction_desc

	auto_accept = no
	ai_min_reply_days = 4
	ai_max_reply_days = 9

	popup_on_receive = yes
	pause_on_receive = yes
	can_send_despite_rejection = no
	ignores_pending_interaction_block = no

	redirect = {
	}

	is_shown = {
		scope:actor = { has_variable = pressed_claim_interaction }
		exists = scope:actor.var:pressed_claim_interaction
		NOT = { scope:actor = scope:recipient }
		scope:recipient = { is_landed = yes }
		scope:actor = {
			any_contender_story = {
				var:pressed_claim_story = scope:actor.var:pressed_claim_interaction
			}
			OR = {
				BMU_target_is_relevant_in_pressed_claim_v2 = { TARGET = scope:recipient }
				OR = {
					scope:recipient = {
						any_supporter_story = {
							var:pressed_claim_story = scope:pressed_claim
							count > 0
						}
					}
					scope:recipient = { BMU_is_claim_target_vassal_that_follows_pressed_claim = { PRESSED_CLAIM = scope:actor.var:pressed_claim_interaction }}
				}
			}
		}
	}

	
	is_valid_showing_failures_only = {
		scope:recipient = {
			custom_tooltip = {
				text = BMU_already_involved_in_a_pressed_claim
				any_contender_story = {
					count = 0
				}
			}
		}
	}

	can_send = {
	}

	on_send = {
		scope:actor.var:pressed_claim_interaction = { save_scope_as = pressed_claim }
	}
	
	on_accept = {
		hidden_effect = {

		}
		if = {
			limit = { NOT = { exists = scope:pressed_claim }}
			scope:actor.var:pressed_claim_interaction = { save_scope_as = pressed_claim }
		}
		scope:actor = {
			random_contender_story = {
				limit = { var:pressed_claim_story = scope:pressed_claim }
				save_scope_as = contender
			}
		}
		if = {
			limit = {
				scope:recipient = {
					any_supporter_story = {
						var:pressed_claim_story = scope:pressed_claim
						count = 0
					}
				}
			}
			scope:recipient = {
				create_story = {
					type = BMU_stakeholder_story
					save_scope_as = supporter
				}
				if = {
					limit = { exists = scope:supporter }
					scope:supporter = {
						set_variable = {
							name = pressed_claim_story
							value = scope:pressed_claim
						}
						set_variable = {
							name = stakeholder
							value = story_owner
						}
						set_variable = {
							name = story_owner
							value = story_owner
						}
						set_variable = {
							name = status
							value = flag:supporter
						}
						story_owner = {
							set_variable = {
								name = pressed_claim_interaction
								value = scope:pressed_claim
							}
							add_to_variable_list = {
								name = pressed_claim_gui
								target = scope:pressed_claim
							}
						}
					}
					scope:pressed_claim = {
						add_to_variable_list = {
							name = BMU_stakeholder_stories
							target = scope:supporter
						}
					}
				}
			}
		}
		else = {
			scope:recipient = {
				random_supporter_story = {
					limit = { var:pressed_claim_story = scope:pressed_claim }
					save_scope_as = supporter
				}
			}
		}
		if = {
			limit = {
				exists = scope:supporter
				scope:supporter = { has_variable = contender }
			}
			scope:recipient = {
				custom_description = {
					text = BMU_stop_supporting_contender
					subject = scope:recipient
					object = scope:supporter.var:contender.story_owner
					scope:supporter.var:contender.story_owner = {
						random_owned_story = {
							limit = {
								story_type = BMU_bargain_story
								var:pressed_claim = scope:pressed_claim
							}
							end_story = yes
						}
					}
				}
			}
		}
		scope:recipient = {
			custom_description = {
				text = BMU_start_supporting_contender
				subject = scope:recipient
				object = scope:actor
				scope:supporter = {
					set_variable = {
						name = contender
						value = scope:contender
					}
				}
			}
		}
	}

	
	ai_accept = {
		base = 1
		modifier = {
			trigger_if = {
				limit = { NOT = { exists = scope:pressed_claim }}
				scope:actor.var:pressed_claim_interaction = { save_temporary_scope_as = pressed_claim }
			}
			trigger_if = {
				limit = { exists = scope:pressed_claim }
				scope:pressed_claim.var:claim_target = { save_temporary_scope_as = claim_target }
				scope:pressed_claim.var:claimed_title = { save_temporary_scope_as = claimed_title }
				scope:recipient = {
					scope:actor = { save_temporary_scope_as = candidate }
					save_scope_value_as = {
						name = actor_score
						value = BMU_contender_score
					}
					trigger_if = {
						limit = {
							any_supporter_story = {
								var:pressed_claim_story = scope:pressed_claim
								var:contender.story_owner = {
									save_temporary_scope_as = candidate
									save_temporary_scope_as = previous_contender
								}
								save_temporary_scope_value_as = {
									name = previous_contender_score
									value = BMU_contender_score
								}
							}
						}
					}
					trigger_else = {
						scope:pressed_claim = {
							save_temporary_scope_value_as = {
								name = top_contender_score
								value = 0
							}
							any_in_list = {
								variable = BMU_stakeholder_stories
								limit = {
									var:status = flag:contender
									NOT = { story_owner = scope:actor }
								}
								story_owner = { save_temporary_scope_as = candidate }
								save_temporary_scope_value_as = {
									name = temp_contender_score
									value = BMU_contender_score
								}
								trigger_if = {
									limit = { scope:temp_contender_score > scope:top_contender_score }
									save_temporary_scope_value_as = {
										name = top_contender_score
										value = scope:temp_contender_score
									}
									story_owner = { save_temporary_scope_as = top_contender }
								}
							}
						}
					}
				}
			}
			add = 0
		}

		modifier = {
			scope:actor = {
				save_temporary_scope_as = candidate
				save_temporary_scope_value_as = {
					name = actor_score
					value = BMU_contender_score
				}
			}
			exists = scope:actor_score
			add = BMU_contender_score
			desc = BMU_interaction_tooltip_support_for_claim
		}
		modifier = {
			exists = scope:previous_contender
			add = { subtract = scope:previous_contender_score }
			desc = BMU_interaction_tooltip_previous_contender_score
		}
		modifier = {
			exists = scope:previous_contender
			scope:previous_contender = {
				any_owned_story = {
					story_type = BMU_bargain_story
					var:pressed_claim = scope:pressed_claim
					var:supporter.story_owner = scope:recipient
					save_temporary_scope_as = bargain
				}
			}
			add = scope:bargain.var:bargain_supporter_value
			desc = BMU_tooltip_bargain
		}
		modifier = {
			exists = scope:top_contender
			scope:top_contender_score > 0
			desc = BMU_interaction_tooltip_top_contender_score
		}
		modifier = {
			scope:actor = scope:recipient.liege
			add = FF_loyalty
			desc = BMU_interaction_tooltip_loyalty
		}
		modifier = {
			exists = joined_faction
			joined_faction = {
				faction_is_type = claimant_faction
				special_character = scope:actor
			}
			add = {
				add = 100
				add = ai_honor
			}
			desc = BMU_interaction_tooltip_faction_claimant
		}
		modifier = {
			is_allied_to = scope:actor
			add = {
				add = 100
				add = ai_honor
				if = {
					limit = { scope:actor = scope:pressed_claim.var:claim_target }
					multiply = 2
				}
			}
			desc = BMU_interaction_tooltip_faction_claimant
		}
		modifier = {
			ai_boldness < 0
			add = ai_boldness
			desc = BMU_interaction_tooltip_reluctance_to_fight
		}
		
		modifier = {
			NOT = { exists = scope:previous_contender }
			ai_greed > 0
			add = { subtract = ai_greed }
			desc = _BMU_interaction_tooltip_wants_something
		}
		modifier = {
			is_councillor_of = scope:pressed_claim.var:claim_target
			NOT = { scope:actor = scope:pressed_claim.var:claim_target }
			add = {
				if = {
					limit = { has_council_position = councillor_chancellor }
					subtract = FF_ambition_get_council_position_chancellor
				}
				else_if = {
					limit = { has_council_position = councillor_steward }
					subtract = FF_ambition_get_council_position_steward
				}
				else_if = {
					limit = { has_council_position = councillor_marshal }
					subtract = FF_ambition_get_council_position_marshal
				}
				else_if = {
					limit = { has_council_position = councillor_spymaster }
					subtract = FF_ambition_get_council_position_spymaster
				}
				max = 0
			}
			desc = BMU_interaction_tooltip_is_councillor_of_claim_target
		}
	}

	ai_will_do = {
		base = 0
		# BMU_bargain_setup = yes

	}
}
