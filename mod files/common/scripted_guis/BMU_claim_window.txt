# BMU_claim_player_involved = {
# 	scope = character
# 	saved_scopes = {
# 		story
# 	}
# 	is_shown = {
# 		# always = no
# 		scope:story = {
# 			is_target_in_variable_list = {
# 				name = supporters
# 				target = root
# 			}
# 		}
# 	}
# }

BMU_has_strong_claim = {
	scope = character
	saved_scopes = {
		title
	}
	is_shown = {
		has_strong_claim_on = scope:claimed_title
	}
}

BMU_has_weak_claim = {
	scope = character
	saved_scopes = {
		title
	}
	is_shown = {
		has_weak_claim_on = scope:claimed_title
	}
}

BMU_has_implicit_claim = {
	scope = character
	saved_scopes = {
		title
	}
	is_shown = {
		NOR = {
			has_claim_on = scope:claimed_title
			has_title = scope:claimed_title
		}
	}
}

# BMU_candidate_picked = {
# 	scope = character
# 	saved_scopes = {
# 		story
# 	}
# 	is_shown = {
# 		# always = no
# 		scope:story = {
# 			any_in_list = {
# 				variable = supporter_stories
# 				story_owner = root
# 				has_variable = status
# 				exists = var:top_candidate
# 			}
# 		}
# 	}
# 	effect = {
# 		debug_log = "tooltip_mouse_enter"
# 		scope:story = {
# 			random_in_list = {
# 				variable = supporter_stories
# 				limit = { story_owner = root }
# 				story_owner = {
# 					set_variable = {
# 						name = tooltip_candidate
# 						value = prev.var:top_candidate
# 					}
# 					set_variable = {
# 						name = claim_story
# 						value = scope:story
# 					}
# 				}
# 			}
# 		}
# 	}
# }

BMU_test = {
	scope = character
	# saved_scopes = {
	# 	story
	# }
	effect = {
		debug_log = "tooltip_mouse_enter"
		# scope:story = {
		# 	story_owner = {
		# 		set_variable = {
		# 			name = top_candidate
		# 			value = prev.var:top_candidate
		# 		}
		# 		set_variable = {
		# 			name = claim_story
		# 			value = scope:story
		# 		}
		# 	}
		# }
	}
}


BMU_ambition_get_title = {
	scope = story
	saved_scopes = {
		contender
	}
	is_shown = {
		any_in_list = {
			variable = BMU_stakeholder_ambitions
			var:ambition = flag:FF_ambition_get_title
		}
	}
	is_valid = {
		any_in_list = {
			variable = BMU_stakeholder_ambitions
			has_variable = ambition
			var:ambition = flag:FF_ambition_get_title
			trigger_if = {
				limit = {
					var:coveted_title = { is_title_created = yes }
					var:coveted_title_holder = scope:contender
				}
				NOR = {
					var:coveted_title = var:coveted_title_holder.primary_title
					var:coveted_title = var:coveted_title_holder.capital_county
				}
			}
			trigger_else_if = {
				limit = { var:coveted_title = { is_title_created = no } }
				OR = {
					var:coveted_title_holder = scope:contender
					AND = {
						var:coveted_title_holder = root.var:pressed_claim_story.var:claim_target
						var:coveted_title = { any_this_title_or_de_jure_above = { this = root.var:pressed_claim_story.var:claimed_title }}
					}
				}
			}
			trigger_else = {
				always = no
			}
		}
	}
}

BMU_ambition_get_coveted_title = {
	scope = story
	saved_scopes = {
		contender
		ambition_type
	}
	is_shown = {
		trigger_if = {
			limit = { var:ambition = scope:ambition_type }
			trigger_if = {
				limit = {
					var:coveted_title = { is_title_created = yes }
					var:coveted_title_holder = scope:contender
				}
				NOR = {
					var:coveted_title = var:coveted_title_holder.primary_title
					var:coveted_title = var:coveted_title_holder.capital_county
				}
			}
			trigger_else_if = {
				limit = { var:coveted_title = { is_title_created = no } }
				OR = {
					var:coveted_title_holder = scope:contender
					AND = {
						var:coveted_title_holder = root.var:pressed_claim_story.var:claim_target
						var:coveted_title = { any_this_title_or_de_jure_above = { this = root.var:pressed_claim_story.var:claimed_title }}
					}
				}
			}
			trigger_else = {
				always = no
			}
		}
		trigger_else = {
			always = no
		}
	}
}

BMU_bargain_with_council_position = {
	scope = character
	saved_scopes = {
		supporter
	}
	is_shown = {
		is_character_interaction_shown = {
			recipient = scope:supporter.var:stakeholder
			interaction = BMU_bargain_with_council_position_interaction
		}
	}
	is_valid = {
		is_character_interaction_valid = {
			recipient = scope:supporter.var:stakeholder
			interaction = BMU_bargain_with_council_position_interaction
		}
	}
	effect = {
		set_variable = {
			name = current_pressed_claim
			value = scope:supporter.var:pressed_claim_story
		}
		open_interaction_window = {
			interaction = BMU_bargain_with_council_position_interaction
			actor = this
			recipient = scope:supporter.var:stakeholder
		}
	}
}

BMU_bargain_for_council_position = {
	scope = character
	saved_scopes = {
		contender
	}
	is_shown = {
		# NOR = {
		# 	var:stakeholder_story.story_owner = { is_councillor_of = scope:contender.story_owner }
		# 	scope:contender = {
		# 		any_in_list = {
		# 			variable = BMU_bargains
		# 			var:ambition = flag:FF_ambition_get_council_position
		# 			count = 4
		# 		}
		# 	}
		# }
	}
	is_valid = {
	}
	
}

# BMU_set_bargain_with = {
# 	scope = story
# 	saved_scopes = {
# 		bargain
# 		supporter
# 		contender
# 	}
# 	is_shown = {
# 		has_variable = current_bargain
# 		scope:bargain = var:current_bargain
# 	}
# 	is_valid = {
# 		trigger_if = {
# 			limit = { scope:bargain.var:ambition = flag:FF_ambition_get_council_position }
# 			scope:supporter.story_owner = {
# 				OR = {
# 					is_vassal_of = scope:contender.story_owner
# 					root.var:pressed_claim_story.var:claimed_title = { is_de_jure_liege_or_above_target = scope:supporter.story_owner.primary_title }
# 				}
# 			}
# 			trigger_if = {
# 				limit = { scope:bargain.var:council_position = flag:chancellor }
# 				scope:supporter.story_owner = { BMU_can_be_chancellor_of = { COURT_OWNER = scope:contender.story_owner }}
# 			}
# 			trigger_else_if = {
# 				limit = { scope:bargain.var:council_position = flag:steward }
# 				scope:supporter.story_owner = { BMU_can_be_steward_of = { COURT_OWNER = scope:contender.story_owner }}
# 			}
# 			trigger_else_if = {
# 				limit = { scope:bargain.var:council_position = flag:marshal }
# 				scope:supporter.story_owner = { BMU_can_be_marshal_of = { COURT_OWNER = scope:contender.story_owner }}
# 			}
# 			trigger_else_if = {
# 				limit = { scope:bargain.var:council_position = flag:spymaster }
# 				scope:supporter.story_owner = { BMU_can_be_spymaster_of = { COURT_OWNER = scope:contender.story_owner }}
# 			}
# 			trigger_else = {
# 				always = no
# 			}
# 		}
# 		NOR = {
# 			trigger_if = {
# 				limit = { scope:bargain = { has_variable = fullfilled }}
# 				custom_description = {
# 					text = BMU_ambition_already_bargained_for
# 					subject = scope:bargain.var:stakeholder_story.story_owner
# 					object = scope:bargain.var:fulfilled.story_owner
# 					scope:bargain = { has_variable = fulfilled }
# 				}
# 			}
# 			any_in_list = {
# 				variable = BMU_bargains
# 				var:ambition = scope:bargain.var:ambition
# 				trigger_if = {
# 					limit = { var:ambition = flag:FF_ambition_get_council_position }
# 					var:council_position = scope:bargain.var:council_position
# 				}
# 				custom_description = {
# 					text = BMU_ambition_already_bargained_with
# 					subject = root.story_owner
# 					object = var:stakeholder_story.story_owner
# 				}
# 			}
# 		}
# 	}
# 	effect = {
# 		set_variable = {
# 			name = current_bargain
# 			value = scope:bargain
# 		}
# 	}
# }

# BMU_set_bargain_for = {
# 	scope = character
# 	saved_scopes = {
# 		bargain
# 		contender
# 		supporter
# 	}
# 	is_shown = {
# 		has_variable = current_bargain
# 		scope:bargain = var:current_bargain
# 	}
# 	is_valid = {
# 		trigger_if = {
# 			limit = { scope:bargain.var:ambition = flag:FF_ambition_get_council_position }
# 			scope:supporter.story_owner = {
# 				OR = {
# 					is_vassal_of = scope:contender.story_owner
# 					scope:supporter.var:pressed_claim_story.var:claimed_title = { is_de_jure_liege_or_above_target = scope:supporter.story_owner.primary_title }
# 				}
# 			}
# 			trigger_if = {
# 				limit = { scope:bargain.var:council_position = flag:chancellor }
# 				scope:supporter.story_owner = { BMU_can_be_chancellor_of = { COURT_OWNER = scope:contender.story_owner }}
# 				trigger_if = {
# 					limit = { is_councillor_of = scope:contender.story_owner }
# 					NAND = {
# 						is_councillor_of = scope:contender.story_owner
# 						has_council_position = councillor_chancellor
# 					}
# 				}
# 			}
# 			trigger_else_if = {
# 				limit = { scope:bargain.var:council_position = flag:steward }
# 				scope:supporter.story_owner = { BMU_can_be_steward_of = { COURT_OWNER = scope:contender.story_owner }}
# 				trigger_if = {
# 					limit = { is_councillor_of = scope:contender.story_owner }
# 					NAND = {
# 						is_councillor_of = scope:contender.story_owner
# 						has_council_position = councillor_steward
# 					}
# 				}
# 			}
# 			trigger_else_if = {
# 				limit = { scope:bargain.var:council_position = flag:marshal }
# 				scope:supporter.story_owner = { BMU_can_be_marshal_of = { COURT_OWNER = scope:contender.story_owner }}
# 				trigger_if = {
# 					limit = { is_councillor_of = scope:contender.story_owner }
# 					# NOT = { has_council_position = councillor_marshal }
# 					NAND = {
# 						is_councillor_of = scope:contender.story_owner
# 						has_council_position = councillor_marshal
# 					}
# 				}
# 			}
# 			trigger_else_if = {
# 				limit = { scope:bargain.var:council_position = flag:spymaster }
# 				scope:supporter.story_owner = { BMU_can_be_spymaster_of = { COURT_OWNER = scope:contender.story_owner }}
# 				trigger_if = {
# 					limit = { is_councillor_of = scope:contender.story_owner }
# 					NAND = {
# 						is_councillor_of = scope:contender.story_owner
# 						has_council_position = councillor_spymaster
# 					}
# 				}
# 			}
# 			trigger_else = {
# 				always = no
# 			}
# 		}
# 		NOR = {
# 			trigger_if = {
# 				limit = { scope:bargain = { has_variable = fullfilled }}
# 				custom_description = {
# 					text = BMU_ambition_already_bargained_for
# 					subject = scope:bargain.var:stakeholder_story.story_owner
# 					object = scope:bargain.var:fulfilled.story_owner
# 					scope:bargain = { has_variable = fulfilled }
# 				}
# 			}
# 			any_in_list = {
# 				variable = BMU_bargains
# 				var:ambition = scope:bargain.var:ambition
# 				trigger_if = {
# 					limit = { var:ambition = flag:FF_ambition_get_council_position }
# 					var:council_position = scope:bargain.var:council_position
# 				}
# 				custom_description = {
# 					text = BMU_ambition_already_bargained_with
# 					subject = root.story_owner
# 					object = var:stakeholder_story.story_owner
# 				}
# 			}
# 		}
# 	}
# 	effect = {
# 		set_variable = {
# 			name = current_bargain
# 			value = scope:bargain
# 		}
# 		set_variable = {
# 			name = bargain_contender
# 			value = scope:contender
# 		}
# 	}
# }

# BMU_send_bargain = {
# 	scope = character
# 	saved_scopes = {
# 		contender
# 	}
# 	is_valid = {
# 		custom_description = {
# 			text = BMU_ambition_selected_for_bargain
# 			subject = root
# 			has_variable = current_bargain
# 		}
# 		trigger_if = {
# 			limit = {
# 				has_variable = current_bargain
# 				var:current_bargain = { save_temporary_scope_as = bargain }
# 			}
# 			NOR = {
# 				custom_description = {
# 					text = BMU_supporter_already_bargained_with
# 					subject = root
# 					object = scope:bargain.var:stakeholder_story.story_owner
# 					scope:contender = {
# 						any_in_list = {
# 							variable = BMU_bargains
# 							var:stakeholder_story.story_owner = scope:bargain.var:stakeholder_story.story_owner
# 						}
# 					}
# 				}
# 				custom_description = {
# 					text = BMU_bargain_under_consideration
# 					subject = root
# 					object = scope:bargain.var:stakeholder_story.story_owner
# 					has_variable = pending_bargain_proposal
# 				}
# 			}
# 			custom_description = {
# 				text = BMU_bargain_acceptable
# 				subject = root
# 				object = scope:bargain.var:stakeholder_story.story_owner
# 				scope:bargain.var:stakeholder_story.story_owner.FF_bargain_acceptance > 0
# 			}
# 		}
# 	}
# 	effect = {
# 		debug_log = "BMU_send_bargain"
# 		debug_log_scopes = no
# 		if = {
# 			limit = { has_variable = current_bargain }
# 			var:current_bargain = {
# 				BMU_execute_bargain_tooltip = { CONTENDER = scope:contender }	
# 			}
# 		}

# 		hidden_effect = {
# 			if = {
# 				limit = { has_variable = current_bargain }
# 				var:current_bargain = { save_scope_as = bargain }
# 				remove_variable = current_bargain
# 				set_variable = {
# 					name = pending_bargain_proposal
# 					value = scope:bargain
# 				}
# 				scope:bargain = {
# 					set_variable = {
# 						name = pending
# 						value = root
# 					}
# 					BMU_send_bargain = { CONTENDER = scope:contender }
# 				}
# 			}
# 		}
# 	}
# }

# BMU_send_bargain_for = {
# 	scope = character
# 	saved_scopes = {
# 		contender
# 	}
# 	is_valid = {
# 		custom_description = {
# 			text = BMU_ambition_selected_for_bargain
# 			subject = root
# 			has_variable = current_bargain
# 		}
# 		trigger_if = {
# 			limit = {
# 				has_variable = current_bargain
# 				var:current_bargain = { save_temporary_scope_as = bargain }
# 				scope:bargain.var:stakeholder_story = { save_temporary_scope_as = supporter }
# 				scope:supporter.var:pressed_claim_story = { save_temporary_scope_as = story }
# 			}
# 			NOR = {
# 				custom_description = {
# 					text = BMU_supporter_already_bargained_with
# 					subject = root
# 					object = scope:contender.story_owner
# 					scope:contender = {
# 						any_in_list = {
# 							variable = BMU_bargains
# 							var:stakeholder_story.story_owner = scope:bargain.var:stakeholder_story.story_owner
# 						}
# 					}
# 				}
# 				scope:contender = {
# 					any_in_list = {
# 						variable = BMU_bargains
# 						trigger_if = {
# 							limit = {
# 								scope:bargain.var:ambition = flag:FF_ambition_get_council_position
# 								var:ambition = flag:FF_ambition_get_council_position
# 							}
# 							custom_description = {
# 								text = BMU_supporter_already_bargained_with
# 								subject = scope:contender.story_owner
# 								object = var:stakeholder_story.story_owner
# 							}
# 						}
# 					}
# 				}
# 				custom_description = {
# 					text = BMU_contender_already_bargained_for
# 					subject = root
# 					object = scope:contender.story_owner
# 					scope:contender = {
# 						any_in_list = {
# 							variable = BMU_bargains
# 							var:stakeholder_story.story_owner = scope:bargain.var:stakeholder_story.story_owner
# 						}
# 					}
# 				}
# 				trigger_if = {
# 					limit = { has_variable = pending_bargain_proposal }
# 					custom_description = {
# 						text = BMU_bargain_under_consideration
# 						subject = root
# 						object = var:pending_bargain_proposal.var:pending
# 						has_variable = pending_bargain_proposal
# 					}
# 				}
# 			}
# 			custom_description = {
# 				text = BMU_bargain_acceptable
# 				subject = root
# 				object = scope:contender.story_owner
# 				scope:contender.story_owner.FF_bargain_for_acceptance > 0
# 			}
# 		}
# 	}
# 	effect = {
# 		debug_log = "BMU_send_bargain"
# 		debug_log_scopes = no
# 		show_as_tooltip = {
# 			if = {
# 				limit = { has_variable = current_bargain }
# 				var:current_bargain = {
# 					BMU_execute_bargain = { CONTENDER = scope:contender }
# 				}	
# 			}
# 		}
		
# 		hidden_effect = {
# 			if = {
# 				limit = { has_variable = current_bargain }
# 				var:current_bargain = { save_scope_as = bargain }
# 				scope:bargain.var:stakeholder_story = { save_scope_as = supporter }
# 				scope:supporter.var:pressed_claim_story = { save_scope_as = story }
# 				remove_variable = current_bargain
# 				set_variable = {
# 					name = pending_bargain_proposal
# 					value = scope:bargain
# 				}
# 				scope:bargain = {
# 					set_variable = {
# 						name = pending
# 						value = scope:contender.story_owner
# 					}
# 					scope:contender.story_owner = {
# 						trigger_event = {
# 							id = BMU_pressed_claim_bargaining.0002
# 							# [TODO] introduce delay
# 						}
# 					}
# 				}
# 			}
# 		}
# 	}
# }

# BMU_clear_bargain = {
# 	scope = character
# 	effect = { remove_variable = current_bargain }
# }

# BMU_bargain_for_contender_select = {
# 	scope = character
# 	saved_scopes = { contender }
# 	effect = {
# 		set_variable = {
# 			name = bargain_for_contender_select
# 			value = scope:contender
# 		}
# 	}
# }

# BMU_bargain_for_contender_clear = {
# 	scope = character
# 	effect = {
# 		remove_variable = bargain_for_contender_select
# 	}
# }


BMU_contender_score_tooltip = {
	scope = character
	saved_scopes = {
		pressed_claim
		claim_target
		claimed_title
		supporter
		gui_candidate
	}
	is_shown = {
		
	}
}

BMU_request_support_sgui = {
	scope = character
	saved_scopes = {
		recipient
	}
	is_shown = {

	}
	is_valid = {
		is_character_interaction_valid = {
			recipient = scope:recipient
			interaction = BMU_call_in_supporter_interaction
		}
	}
	effect = {
		open_interaction_window = {
			interaction = BMU_call_in_supporter_interaction
			actor = root
			recipient = scope:recipient
		}
	}
}

BMU_set_pressed_claim_interaction = {
	scope = character
	saved_scopes = { claimed_title }
	effect = {
		random_in_list = {
			variable = pressed_claim_gui
			limit = { var:claimed_title = scope:claimed_title }
			save_scope_as = pressed_claim
		}
		set_variable = {
			name = pressed_claim_interaction
			value = scope:pressed_claim
		}
		clear_variable_list = stakeholders_gui
		if = {
			limit = { any_contender_story = { var:pressed_claim_story = scope:pressed_claim }}
			every_ally = { add_to_list = stakeholders }
			every_close_family_member = { add_to_list = stakeholders }
			every_vassal = { add_to_list = stakeholders }
			liege = { add_to_list = stakeholders }
			every_relation = {
				type = friend
				add_to_list = stakeholders
			}
			every_relation = {
				type = lover
				add_to_list = stakeholders
			}
			dynasty.dynast = { add_to_list = stakeholders }
			house.house_head = { add_to_list = stakeholders }
			every_relation = {
				type = stakeholder_proxy
				limit = {
					OR = {
						any_relation = {
							type = rival
							 any_contender_story = { var:pressed_claim_story = scope:pressed_claim }
						}
						BMU_is_claim_target_vassal_that_follows_pressed_claim = { PRESSED_CLAIM = scope:pressed_claim }
					}
				}
				add_to_list = stakeholders
			}
		}
		ordered_in_list = {
			list = stakeholders
			max = 1000
			check_range_bounds = no
			limit = {
				is_landed = yes
				NOT = { this = root }
			}
			order_by = max_military_strength
			random_stakeholder_story = {
				limit = { var:pressed_claim_story = scope:pressed_claim }
				root = {
					add_to_variable_list = {
						name = stakeholders_gui
						target = prev
					}
				}
			}
		}
	}
}